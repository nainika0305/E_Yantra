
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000733  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4d c0       	rjmp	.+154    	; 0xa0 <__vector_1>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	38 d0       	rcall	.+112    	; 0xe6 <main>
  76:	3c c0       	rjmp	.+120    	; 0xf0 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <buzzer_pin_config>:
 */
void buzzer_pin_config(void) {
	// << NOTE >> : Use Masking and Shift Operators here

	// Make **ONLY** Buzzer pin as output
	buzzer_ddr_reg |=(1<<buzzer_pin);
  7a:	56 9a       	sbi	0x0a, 6	; 10

	// Turn **ONLY** the Buzzer pin LOW
	buzzer_port_reg &=~(1<<buzzer_pin);
  7c:	5e 98       	cbi	0x0b, 6	; 11
  7e:	08 95       	ret

00000080 <interrupt_sw_pin_config>:
 */
void interrupt_sw_pin_config(void) {
	// << NOTE >> : Use Masking and Shift Operators here

	// Make **ONLY** Interrupt Switch pin as input
	interrupt_sw_ddr_reg &=~(1<<interrupt_sw_pin);
  80:	52 98       	cbi	0x0a, 2	; 10

	// Make **ONLY** Interrupt Switch pin internally pull-up
	interrupt_sw_port_reg |=(1<<interrupt_sw_pin)  ;
  82:	5a 9a       	sbi	0x0b, 2	; 11
  84:	08 95       	ret

00000086 <interrupt_sw_config>:
 * @brief      Configures External Interrupt on the Interrupt Switch
 */
void interrupt_sw_config(void) {

	// all interrupts have to be disabled before configuring interrupts
	cli();	// Disables Interrupts Globally
  86:	f8 94       	cli
	
	// Turn ON INT7 (alternative function of PE7 i.e Interrupt Switch Pin)
	EIMSK_reg |=(1<<interrupt_sw_pin) ;
  88:	ea 9a       	sbi	0x1d, 2	; 29
	
	// Low level detection on INT7
	EICRB_reg &=~((1<<interrupt_ISC_switch_bit0)|(1<<interrupt_ISC_switch_bit1));
  8a:	e9 e6       	ldi	r30, 0x69	; 105
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8c 7f       	andi	r24, 0xFC	; 252
  92:	80 83       	st	Z, r24
	
	sei();	// Enable Interrupts Gloabally
  94:	78 94       	sei
  96:	08 95       	ret

00000098 <buzzer_on>:
}

void buzzer_on(void)
{
	buzzer_port_reg |=(1<<buzzer_pin);             // Turn **ONLY** the Buzzer pin HIGH
  98:	5e 9a       	sbi	0x0b, 6	; 11
  9a:	08 95       	ret

0000009c <buzzer_off>:
}

void buzzer_off(void)
{
	buzzer_port_reg &=~(1<<buzzer_pin) ;             // Turn **ONLY** the Buzzer pin LOW
  9c:	5e 98       	cbi	0x0b, 6	; 11
  9e:	08 95       	ret

000000a0 <__vector_1>:
}

/**
 * @brief      Interrupt Service Routine for INT7, which turns on the Buzzer when the Interrupt Switch is pressed
 */
ISR(interrupt_isr_vect) {
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
						buzzer_on();			// Turn on the Buzzer
  c2:	ea df       	rcall	.-44     	; 0x98 <buzzer_on>
}
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	7f 91       	pop	r23
  d2:	6f 91       	pop	r22
  d4:	5f 91       	pop	r21
  d6:	4f 91       	pop	r20
  d8:	3f 91       	pop	r19
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <main>:
 * @details    Initializes the Buzzer Pin and the Interrupt Switch Pin. Turns ON and configure the alternate function (INT7) for PE7.
 */
int main(void) {
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	buzzer_pin_config();			// Make the Buzzer Pin and OUTPUT
  e6:	c9 df       	rcall	.-110    	; 0x7a <buzzer_pin_config>
	interrupt_sw_pin_config();		// Make the Interrupt Switch Pin as INPUT
  e8:	cb df       	rcall	.-106    	; 0x80 <interrupt_sw_pin_config>
	interrupt_sw_config();			// Turn ON and configure the Alternate Function (INT7) for PE7.
  ea:	cd df       	rcall	.-102    	; 0x86 <interrupt_sw_config>
  ec:	d7 df       	rcall	.-82     	; 0x9c <buzzer_off>
	while (1) {
	buzzer_off();					// Turn **ONLY** the Buzzer pin LOW
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x6>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
