
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800118  00800118  00000d40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b2  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000998  00000000  00000000  0000228e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e3  00000000  00000000  00002c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099a  00000000  00000000  00003e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	63 d2       	rcall	.+1222   	; 0x562 <main>
  9c:	f9 c5       	rjmp	.+3058   	; 0xc90 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <lcd_port_config>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	87 60       	ori	r24, 0x07	; 7
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	08 95       	ret

000000ba <lcd_set_4bit>:
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	9f e0       	ldi	r25, 0x0F	; 15
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_set_4bit+0x4>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_set_4bit+0xa>
  c4:	00 00       	nop
  c6:	28 98       	cbi	0x05, 0	; 5
  c8:	2a 98       	cbi	0x05, 2	; 5
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	29 9a       	sbi	0x05, 1	; 5
  d0:	ef e1       	ldi	r30, 0x1F	; 31
  d2:	fe e4       	ldi	r31, 0x4E	; 78
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_set_4bit+0x1a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_set_4bit+0x20>
  da:	00 00       	nop
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	ef e9       	ldi	r30, 0x9F	; 159
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_set_4bit+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_set_4bit+0x2e>
  e8:	00 00       	nop
  ea:	28 98       	cbi	0x05, 0	; 5
  ec:	2a 98       	cbi	0x05, 2	; 5
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	29 9a       	sbi	0x05, 1	; 5
  f2:	ef e1       	ldi	r30, 0x1F	; 31
  f4:	fe e4       	ldi	r31, 0x4E	; 78
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_set_4bit+0x3c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_set_4bit+0x42>
  fc:	00 00       	nop
  fe:	29 98       	cbi	0x05, 1	; 5
 100:	ef e9       	ldi	r30, 0x9F	; 159
 102:	ff e0       	ldi	r31, 0x0F	; 15
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_set_4bit+0x4a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_set_4bit+0x50>
 10a:	00 00       	nop
 10c:	28 98       	cbi	0x05, 0	; 5
 10e:	2a 98       	cbi	0x05, 2	; 5
 110:	8b b9       	out	0x0b, r24	; 11
 112:	29 9a       	sbi	0x05, 1	; 5
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_set_4bit+0x5e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_set_4bit+0x64>
 11e:	00 00       	nop
 120:	29 98       	cbi	0x05, 1	; 5
 122:	ef e9       	ldi	r30, 0x9F	; 159
 124:	ff e0       	ldi	r31, 0x0F	; 15
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_set_4bit+0x6c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_set_4bit+0x72>
 12c:	00 00       	nop
 12e:	28 98       	cbi	0x05, 0	; 5
 130:	2a 98       	cbi	0x05, 2	; 5
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	8b b9       	out	0x0b, r24	; 11
 136:	29 9a       	sbi	0x05, 1	; 5
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x82>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_set_4bit+0x88>
 142:	00 00       	nop
 144:	29 98       	cbi	0x05, 1	; 5
 146:	08 95       	ret

00000148 <lcd_wr_command>:
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	9b b9       	out	0x0b, r25	; 11
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	28 2f       	mov	r18, r24
 152:	20 7f       	andi	r18, 0xF0	; 240
 154:	92 2b       	or	r25, r18
 156:	9b b9       	out	0x0b, r25	; 11
 158:	28 98       	cbi	0x05, 0	; 5
 15a:	2a 98       	cbi	0x05, 2	; 5
 15c:	29 9a       	sbi	0x05, 1	; 5
 15e:	ef e1       	ldi	r30, 0x1F	; 31
 160:	fe e4       	ldi	r31, 0x4E	; 78
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_wr_command+0x1a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_wr_command+0x20>
 168:	00 00       	nop
 16a:	29 98       	cbi	0x05, 1	; 5
 16c:	9b b1       	in	r25, 0x0b	; 11
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	9b b9       	out	0x0b, r25	; 11
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	89 2b       	or	r24, r25
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	28 98       	cbi	0x05, 0	; 5
 17e:	2a 98       	cbi	0x05, 2	; 5
 180:	29 9a       	sbi	0x05, 1	; 5
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	9e e4       	ldi	r25, 0x4E	; 78
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_wr_command+0x3e>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_wr_command+0x44>
 18c:	00 00       	nop
 18e:	29 98       	cbi	0x05, 1	; 5
 190:	08 95       	ret

00000192 <lcd_init>:
 192:	93 df       	rcall	.-218    	; 0xba <lcd_set_4bit>
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0x6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init+0xc>
 19e:	00 00       	nop
 1a0:	88 e2       	ldi	r24, 0x28	; 40
 1a2:	d2 df       	rcall	.-92     	; 0x148 <lcd_wr_command>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	d0 df       	rcall	.-96     	; 0x148 <lcd_wr_command>
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	ce df       	rcall	.-100    	; 0x148 <lcd_wr_command>
 1ac:	8e e0       	ldi	r24, 0x0E	; 14
 1ae:	cc df       	rcall	.-104    	; 0x148 <lcd_wr_command>
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	ca cf       	rjmp	.-108    	; 0x148 <lcd_wr_command>
 1b4:	08 95       	ret

000001b6 <lcd_home>:
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	c7 cf       	rjmp	.-114    	; 0x148 <lcd_wr_command>
 1ba:	08 95       	ret

000001bc <lcd_cursor>:
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	69 f0       	breq	.+26     	; 0x1da <lcd_cursor+0x1e>
 1c0:	18 f4       	brcc	.+6      	; 0x1c8 <lcd_cursor+0xc>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <lcd_cursor+0x16>
 1c6:	08 95       	ret
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <lcd_cursor+0x26>
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	69 f0       	breq	.+26     	; 0x1ea <lcd_cursor+0x2e>
 1d0:	08 95       	ret
 1d2:	8f e7       	ldi	r24, 0x7F	; 127
 1d4:	86 0f       	add	r24, r22
 1d6:	b8 cf       	rjmp	.-144    	; 0x148 <lcd_wr_command>
 1d8:	08 95       	ret
 1da:	8f eb       	ldi	r24, 0xBF	; 191
 1dc:	86 0f       	add	r24, r22
 1de:	b4 cf       	rjmp	.-152    	; 0x148 <lcd_wr_command>
 1e0:	08 95       	ret
 1e2:	83 e9       	ldi	r24, 0x93	; 147
 1e4:	86 0f       	add	r24, r22
 1e6:	b0 cf       	rjmp	.-160    	; 0x148 <lcd_wr_command>
 1e8:	08 95       	ret
 1ea:	83 ed       	ldi	r24, 0xD3	; 211
 1ec:	86 0f       	add	r24, r22
 1ee:	ac cf       	rjmp	.-168    	; 0x148 <lcd_wr_command>
 1f0:	08 95       	ret

000001f2 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 1f2:	cf 93       	push	r28
 1f4:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 1f6:	e2 df       	rcall	.-60     	; 0x1bc <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	9c 2f       	mov	r25, r28
 202:	90 7f       	andi	r25, 0xF0	; 240
 204:	89 2b       	or	r24, r25
 206:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 208:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 20a:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 20c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_wr_char+0x20>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_wr_char+0x26>
 218:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 21a:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	c2 95       	swap	r28
 226:	c0 7f       	andi	r28, 0xF0	; 240
 228:	c8 2b       	or	r28, r24
 22a:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 22c:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 22e:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 230:	29 9a       	sbi	0x05, 1	; 5
 232:	8f e1       	ldi	r24, 0x1F	; 31
 234:	9e e4       	ldi	r25, 0x4E	; 78
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_wr_char+0x44>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_wr_char+0x4a>
 23c:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 23e:	29 98       	cbi	0x05, 1	; 5
}
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	d8 2f       	mov	r29, r24
 24e:	c6 2f       	mov	r28, r22
 250:	fa 01       	movw	r30, r20
	while(*str != '\0')
 252:	40 81       	ld	r20, Z
 254:	44 23       	and	r20, r20
 256:	61 f0       	breq	.+24     	; 0x270 <lcd_string+0x2c>
 258:	8f 01       	movw	r16, r30
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 25e:	6c 2f       	mov	r22, r28
 260:	8d 2f       	mov	r24, r29
 262:	c7 df       	rcall	.-114    	; 0x1f2 <lcd_wr_char>
		str++;
		column+=1;
 264:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 266:	f8 01       	movw	r30, r16
 268:	41 91       	ld	r20, Z+
 26a:	8f 01       	movw	r16, r30
 26c:	41 11       	cpse	r20, r1
 26e:	f7 cf       	rjmp	.-18     	; 0x25e <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	d8 2f       	mov	r29, r24
 288:	c6 2f       	mov	r28, r22
 28a:	7a 01       	movw	r14, r20
 28c:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 28e:	96 df       	rcall	.-212    	; 0x1bc <lcd_cursor>
	
	if (val < 0)
 290:	ff 20       	and	r15, r15
 292:	4c f4       	brge	.+18     	; 0x2a6 <lcd_numeric_value+0x2c>
	{
		val = 0 - val;
 294:	f1 94       	neg	r15
 296:	e1 94       	neg	r14
 298:	f1 08       	sbc	r15, r1
		lcd_string(row, column, "-");
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	51 e0       	ldi	r21, 0x01	; 1
 29e:	6c 2f       	mov	r22, r28
 2a0:	8d 2f       	mov	r24, r29
 2a2:	d0 df       	rcall	.-96     	; 0x244 <lcd_string>
		column+=1;
 2a4:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 2a6:	dd 23       	and	r29, r29
 2a8:	11 f0       	breq	.+4      	; 0x2ae <lcd_numeric_value+0x34>
 2aa:	c1 11       	cpse	r28, r1
	{
		lcd_home();
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_numeric_value+0x38>
 2ae:	83 df       	rcall	.-250    	; 0x1b6 <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <lcd_numeric_value+0x3e>
 2b2:	6c 2f       	mov	r22, r28
 2b4:	8d 2f       	mov	r24, r29
 2b6:	82 df       	rcall	.-252    	; 0x1bc <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 2b8:	05 30       	cpi	r16, 0x05	; 5
 2ba:	11 05       	cpc	r17, r1
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <lcd_numeric_value+0x46>
	{
		million = val/10000+48;
 2be:	ad c0       	rjmp	.+346    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 2c0:	c7 01       	movw	r24, r14
 2c2:	60 e1       	ldi	r22, 0x10	; 16
 2c4:	77 e2       	ldi	r23, 0x27	; 39
 2c6:	d6 d1       	rcall	.+940    	; 0x674 <__divmodhi4>
 2c8:	ab 01       	movw	r20, r22
 2ca:	40 5d       	subi	r20, 0xD0	; 208
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__data_end+0x1>
 2d2:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__data_end>
		lcd_wr_char(row ,column, million);
 2d6:	6c 2f       	mov	r22, r28
 2d8:	8d 2f       	mov	r24, r29
		column+=1;
 2da:	8b df       	rcall	.-234    	; 0x1f2 <lcd_wr_char>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
	{
		temp = val/1000;
 2dc:	cf 5f       	subi	r28, 0xFF	; 255
 2de:	c7 01       	movw	r24, r14
 2e0:	68 ee       	ldi	r22, 0xE8	; 232
 2e2:	73 e0       	ldi	r23, 0x03	; 3
 2e4:	c7 d1       	rcall	.+910    	; 0x674 <__divmodhi4>
 2e6:	ab 01       	movw	r20, r22
 2e8:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <temp+0x1>
 2ec:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <temp>
		thousand = temp%10 + 48;
 2f0:	9b 01       	movw	r18, r22
 2f2:	ad ec       	ldi	r26, 0xCD	; 205
 2f4:	bc ec       	ldi	r27, 0xCC	; 204
 2f6:	d1 d1       	rcall	.+930    	; 0x69a <__umulhisi3>
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	9c 01       	movw	r18, r24
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	48 1b       	sub	r20, r24
 31c:	59 0b       	sbc	r21, r25
 31e:	40 5d       	subi	r20, 0xD0	; 208
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <thousand+0x1>
 326:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <thousand>
		lcd_wr_char(row, column, thousand);
 32a:	6c 2f       	mov	r22, r28
 32c:	8d 2f       	mov	r24, r29
		column+=1;
 32e:	61 df       	rcall	.-318    	; 0x1f2 <lcd_wr_char>
 330:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 332:	03 c0       	rjmp	.+6      	; 0x33a <lcd_numeric_value+0xc0>
 334:	03 30       	cpi	r16, 0x03	; 3
 336:	11 05       	cpc	r17, r1
	{
		temp = val/100;
 338:	59 f5       	brne	.+86     	; 0x390 <lcd_numeric_value+0x116>
 33a:	c7 01       	movw	r24, r14
 33c:	64 e6       	ldi	r22, 0x64	; 100
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	99 d1       	rcall	.+818    	; 0x674 <__divmodhi4>
 342:	ab 01       	movw	r20, r22
 344:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <temp+0x1>
 348:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <temp>
		hundred = temp%10 + 48;
 34c:	9b 01       	movw	r18, r22
 34e:	ad ec       	ldi	r26, 0xCD	; 205
 350:	bc ec       	ldi	r27, 0xCC	; 204
 352:	a3 d1       	rcall	.+838    	; 0x69a <__umulhisi3>
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	48 1b       	sub	r20, r24
 378:	59 0b       	sbc	r21, r25
 37a:	40 5d       	subi	r20, 0xD0	; 208
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <hundred+0x1>
 382:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <hundred>
		lcd_wr_char(row, column, hundred);
 386:	6c 2f       	mov	r22, r28
 388:	8d 2f       	mov	r24, r29
		column+=1;
 38a:	33 df       	rcall	.-410    	; 0x1f2 <lcd_wr_char>
 38c:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 2 || flag == 1)
 38e:	04 c0       	rjmp	.+8      	; 0x398 <lcd_numeric_value+0x11e>
 390:	02 30       	cpi	r16, 0x02	; 2
 392:	11 05       	cpc	r17, r1
 394:	09 f0       	breq	.+2      	; 0x398 <lcd_numeric_value+0x11e>
	{
		temp = val/10;
 396:	46 c0       	rjmp	.+140    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 398:	c7 01       	movw	r24, r14
 39a:	6a e0       	ldi	r22, 0x0A	; 10
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	6a d1       	rcall	.+724    	; 0x674 <__divmodhi4>
 3a0:	ab 01       	movw	r20, r22
 3a2:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <temp+0x1>
 3a6:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <temp>
		tens = temp%10 + 48;
 3aa:	9b 01       	movw	r18, r22
 3ac:	ad ec       	ldi	r26, 0xCD	; 205
 3ae:	bc ec       	ldi	r27, 0xCC	; 204
 3b0:	74 d1       	rcall	.+744    	; 0x69a <__umulhisi3>
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	9c 01       	movw	r18, r24
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	82 0f       	add	r24, r18
 3d2:	93 1f       	adc	r25, r19
 3d4:	48 1b       	sub	r20, r24
 3d6:	59 0b       	sbc	r21, r25
 3d8:	40 5d       	subi	r20, 0xD0	; 208
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	50 93 1d 01 	sts	0x011D, r21	; 0x80011d <tens+0x1>
		lcd_wr_char(row, column, tens);
 3e0:	40 93 1c 01 	sts	0x011C, r20	; 0x80011c <tens>
 3e4:	6c 2f       	mov	r22, r28
		column+=1;
 3e6:	8d 2f       	mov	r24, r29
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
	{
		unit = val%10 + 48;
 3e8:	04 df       	rcall	.-504    	; 0x1f2 <lcd_wr_char>
 3ea:	cf 5f       	subi	r28, 0xFF	; 255
 3ec:	c7 01       	movw	r24, r14
 3ee:	6a e0       	ldi	r22, 0x0A	; 10
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	40 d1       	rcall	.+640    	; 0x674 <__divmodhi4>
 3f4:	ac 01       	movw	r20, r24
 3f6:	40 5d       	subi	r20, 0xD0	; 208
 3f8:	5f 4f       	sbci	r21, 0xFF	; 255
 3fa:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <unit+0x1>
		lcd_wr_char(row, column, unit);
 3fe:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <unit>
 402:	6c 2f       	mov	r22, r28
 404:	8d 2f       	mov	r24, r29
		column+=1;
 406:	f5 de       	rcall	.-534    	; 0x1f2 <lcd_wr_char>
	}
	
	if(digits > 5)
 408:	cf 5f       	subi	r28, 0xFF	; 255
 40a:	06 30       	cpi	r16, 0x06	; 6
 40c:	11 05       	cpc	r17, r1
	{
		lcd_wr_char(row, column, 'E');
 40e:	74 f0       	brlt	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 410:	45 e4       	ldi	r20, 0x45	; 69
 412:	6c 2f       	mov	r22, r28
 414:	8d 2f       	mov	r24, r29
 416:	ed de       	rcall	.-550    	; 0x1f2 <lcd_wr_char>
		column+=1;
	}
 418:	09 c0       	rjmp	.+18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		lcd_wr_char(row ,column, million);
		column+=1;
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 41a:	04 30       	cpi	r16, 0x04	; 4
 41c:	11 05       	cpc	r17, r1
 41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	89 cf       	rjmp	.-238    	; 0x334 <lcd_numeric_value+0xba>
 422:	5d cf       	rjmp	.-326    	; 0x2de <lcd_numeric_value+0x64>
		lcd_wr_char(row, column, tens);
		column+=1;
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
 424:	01 30       	cpi	r16, 0x01	; 1
 426:	11 05       	cpc	r17, r1
 428:	81 f7       	brne	.-32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 42a:	e0 cf       	rjmp	.-64     	; 0x3ec <lcd_numeric_value+0x172>
	if(digits > 5)
	{
		lcd_wr_char(row, column, 'E');
		column+=1;
	}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	08 95       	ret

0000043a <wl_sensors_port_config>:
	unsigned char adc_8bit_data;
	 adc_8bit_data = ADCH_reg;
	// read the appropriate ADC data register/s
	
	return adc_8bit_data;
}
 43a:	87 b1       	in	r24, 0x07	; 7
 43c:	88 7f       	andi	r24, 0xF8	; 248
 43e:	87 b9       	out	0x07, r24	; 7
 440:	88 b1       	in	r24, 0x08	; 8
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	88 b9       	out	0x08, r24	; 8
 446:	08 95       	ret

00000448 <ir_prox_sensors_port_config>:
 448:	87 b1       	in	r24, 0x07	; 7
 44a:	87 7e       	andi	r24, 0xE7	; 231
 44c:	87 b9       	out	0x07, r24	; 7
 44e:	88 b1       	in	r24, 0x08	; 8
 450:	87 7e       	andi	r24, 0xE7	; 231
 452:	88 b9       	out	0x08, r24	; 8
 454:	3d 98       	cbi	0x07, 5	; 7
 456:	45 98       	cbi	0x08, 5	; 8
 458:	08 95       	ret

0000045a <adc_init>:
 45a:	ea e7       	ldi	r30, 0x7A	; 122
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	86 68       	ori	r24, 0x86	; 134
 462:	80 83       	st	Z, r24
 464:	80 81       	ld	r24, Z
 466:	86 78       	andi	r24, 0x86	; 134
 468:	80 83       	st	Z, r24
 46a:	eb e7       	ldi	r30, 0x7B	; 123
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	80 7b       	andi	r24, 0xB0	; 176
 472:	80 83       	st	Z, r24
 474:	ec e7       	ldi	r30, 0x7C	; 124
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	80 76       	andi	r24, 0x60	; 96
 47c:	80 83       	st	Z, r24
 47e:	80 81       	ld	r24, Z
 480:	80 66       	ori	r24, 0x60	; 96
 482:	80 83       	st	Z, r24
 484:	80 b7       	in	r24, 0x30	; 48
 486:	80 68       	ori	r24, 0x80	; 128
 488:	80 bf       	out	0x30, r24	; 48
 48a:	08 95       	ret

0000048c <select_adc_channel>:
 48c:	88 30       	cpi	r24, 0x08	; 8
 48e:	30 f0       	brcs	.+12     	; 0x49c <select_adc_channel+0x10>
 490:	eb e7       	ldi	r30, 0x7B	; 123
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	90 81       	ld	r25, Z
 496:	98 60       	ori	r25, 0x08	; 8
 498:	90 83       	st	Z, r25
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <select_adc_channel+0x1a>
 49c:	eb e7       	ldi	r30, 0x7B	; 123
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	90 81       	ld	r25, Z
 4a2:	97 7f       	andi	r25, 0xF7	; 247
 4a4:	90 83       	st	Z, r25
 4a6:	98 2f       	mov	r25, r24
 4a8:	97 7f       	andi	r25, 0xF7	; 247
 4aa:	94 30       	cpi	r25, 0x04	; 4
 4ac:	30 f4       	brcc	.+12     	; 0x4ba <select_adc_channel+0x2e>
 4ae:	ec e7       	ldi	r30, 0x7C	; 124
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	90 81       	ld	r25, Z
 4b4:	9b 7f       	andi	r25, 0xFB	; 251
 4b6:	90 83       	st	Z, r25
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <select_adc_channel+0x38>
 4ba:	ec e7       	ldi	r30, 0x7C	; 124
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	90 81       	ld	r25, Z
 4c0:	94 60       	ori	r25, 0x04	; 4
 4c2:	90 83       	st	Z, r25
 4c4:	98 2f       	mov	r25, r24
 4c6:	93 70       	andi	r25, 0x03	; 3
 4c8:	41 f0       	breq	.+16     	; 0x4da <select_adc_channel+0x4e>
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	31 09       	sbc	r19, r1
 4d2:	23 70       	andi	r18, 0x03	; 3
 4d4:	33 27       	eor	r19, r19
 4d6:	23 2b       	or	r18, r19
 4d8:	31 f4       	brne	.+12     	; 0x4e6 <select_adc_channel+0x5a>
 4da:	ec e7       	ldi	r30, 0x7C	; 124
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	90 81       	ld	r25, Z
 4e0:	9d 7f       	andi	r25, 0xFD	; 253
 4e2:	90 83       	st	Z, r25
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <select_adc_channel+0x64>
 4e6:	ec e7       	ldi	r30, 0x7C	; 124
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	90 81       	ld	r25, Z
 4ec:	92 60       	ori	r25, 0x02	; 2
 4ee:	90 83       	st	Z, r25
 4f0:	80 fd       	sbrc	r24, 0
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <select_adc_channel+0x74>
 4f4:	ec e7       	ldi	r30, 0x7C	; 124
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	8e 7f       	andi	r24, 0xFE	; 254
 4fc:	80 83       	st	Z, r24
 4fe:	08 95       	ret
 500:	ec e7       	ldi	r30, 0x7C	; 124
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	81 60       	ori	r24, 0x01	; 1
 508:	80 83       	st	Z, r24
 50a:	08 95       	ret

0000050c <start_adc>:
 50c:	ea e7       	ldi	r30, 0x7A	; 122
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	80 64       	ori	r24, 0x40	; 64
 514:	80 83       	st	Z, r24
 516:	08 95       	ret

00000518 <check_adc_conversion_complete>:
 518:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 51c:	86 fb       	bst	r24, 6
 51e:	88 27       	eor	r24, r24
 520:	80 f9       	bld	r24, 0
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	89 27       	eor	r24, r25
 526:	08 95       	ret

00000528 <reset_adc_config_registers>:
/**
 * @brief      Reset ADC config registers, ADCSRA, ADCSRB and ADMUX
 */
void reset_adc_config_registers(void){
	// << NOTE >> : Use Masking and Shift Operators here
	adc_init();
 528:	98 df       	rcall	.-208    	; 0x45a <adc_init>
	ADCSRA_reg |= (1<<ADIF_bit);
 52a:	ea e7       	ldi	r30, 0x7A	; 122
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	80 61       	ori	r24, 0x10	; 16
 532:	80 83       	st	Z, r24
	ADCSRA_reg &=0x00;
 534:	80 81       	ld	r24, Z
 536:	10 82       	st	Z, r1
	ADCSRB_reg &=0x00;
 538:	eb e7       	ldi	r30, 0x7B	; 123
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	10 82       	st	Z, r1
	ADMUX_reg &=0x00;
 540:	ec e7       	ldi	r30, 0x7C	; 124
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	10 82       	st	Z, r1
 548:	08 95       	ret

0000054a <convert_analog_channel_data>:
 *
 * @param[in]  sensor_channel_number   ADC channel number of sensor
 *
 * @return     8-bit digital data from the input sensor ADC channel
 */
unsigned char convert_analog_channel_data( unsigned char sensor_channel_number ){
 54a:	cf 93       	push	r28
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	
	unsigned char adc_8bit_data;
	
	select_adc_channel( sensor_channel_number );
 54c:	9f df       	rcall	.-194    	; 0x48c <select_adc_channel>
	
	start_adc();
 54e:	de df       	rcall	.-68     	; 0x50c <start_adc>
	
	while( !( check_adc_conversion_complete() ) );
 550:	e3 df       	rcall	.-58     	; 0x518 <check_adc_conversion_complete>
 552:	88 23       	and	r24, r24
 554:	e9 f3       	breq	.-6      	; 0x550 <convert_analog_channel_data+0x6>
 * @return     adc_8bit_data	ADC converted data of the sensor by reading ADC data registers
 */
unsigned char read_adc_converted_data(void){
	// << NOTE >> : Use Masking and Shift Operators here
	unsigned char adc_8bit_data;
	 adc_8bit_data = ADCH_reg;
 556:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	while( !( check_adc_conversion_complete() ) );
	
	adc_8bit_data = read_adc_converted_data();
	
	reset_adc_config_registers();
 55a:	e6 df       	rcall	.-52     	; 0x528 <reset_adc_config_registers>
 55c:	8c 2f       	mov	r24, r28
	
	return adc_8bit_data;
}
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <main>:
 562:	cf 93       	push	r28
 * @brief      Main Function
 *
 * @details    First Initializes the three white line sensors and 3rd, 4th, 5th IR proximity sensors
 *			and displays the ADC converted data of all these sensors on LCD and sends ADC data of Center White Line sensor on UART
 */
int main(void) {
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	69 97       	sbiw	r28, 0x19	; 25
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function except a part of while loop
	
	wl_sensors_port_config();			// Initialize the three white line sensors
 576:	61 df       	rcall	.-318    	; 0x43a <wl_sensors_port_config>
	ir_prox_sensors_port_config();		// Initialize the 3rd, 4th and 5th IR proximity sensors
 578:	67 df       	rcall	.-306    	; 0x448 <ir_prox_sensors_port_config>
	
	adc_init();							// Initialize the ADC
 57a:	6f df       	rcall	.-290    	; 0x45a <adc_init>
	
	lcd_port_config();					// Initialize the LCD port
 57c:	91 dd       	rcall	.-1246   	; 0xa0 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 57e:	09 de       	rcall	.-1006   	; 0x192 <lcd_init>
 580:	87 e6       	ldi	r24, 0x67	; 103
	
	uart_init(UBRR_VALUE);				// Initialize the UART
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	55 d0       	rcall	.+170    	; 0x630 <uart_init>
 586:	0f 2e       	mov	r0, r31
 588:	f2 e0       	ldi	r31, 0x02	; 2
		
		lcd_numeric_value(2, 1, ir_prox_3_sensor_data, 3);
		lcd_numeric_value(2, 5, ir_prox_4_sensor_data, 3);
		lcd_numeric_value(2, 9, ir_prox_5_sensor_data, 3);
		
		sprintf(tx_buffer, "Center WL data: %03d\n", center_wl_sensor_data);
 58a:	cf 2e       	mov	r12, r31
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	df 2e       	mov	r13, r31
 590:	f0 2d       	mov	r31, r0
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	7c 01       	movw	r14, r24
	{
		// ------------------------------- //
		
		// get the ADC converted data of the sensors from the appropriate channel number
		
		left_wl_sensor_data		= convert_analog_channel_data(left_wl_sensor_channel);
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	d7 df       	rcall	.-82     	; 0x54a <convert_analog_channel_data>
 59c:	88 2e       	mov	r8, r24
		center_wl_sensor_data	= convert_analog_channel_data(center_wl_sensor_channel);
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	d4 df       	rcall	.-88     	; 0x54a <convert_analog_channel_data>
 5a2:	a8 2e       	mov	r10, r24
		right_wl_sensor_data	= convert_analog_channel_data(right_wl_sensor_channel);
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	d1 df       	rcall	.-94     	; 0x54a <convert_analog_channel_data>
 5a8:	98 2e       	mov	r9, r24
		
		ir_prox_3_sensor_data	= convert_analog_channel_data(ir_prox_3_sensor_channel);
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	ce df       	rcall	.-100    	; 0x54a <convert_analog_channel_data>
 5ae:	b8 2e       	mov	r11, r24
 5b0:	84 e0       	ldi	r24, 0x04	; 4
		ir_prox_4_sensor_data	= convert_analog_channel_data(ir_prox_4_sensor_channel);
 5b2:	cb df       	rcall	.-106    	; 0x54a <convert_analog_channel_data>
 5b4:	08 2f       	mov	r16, r24
 5b6:	85 e0       	ldi	r24, 0x05	; 5
		ir_prox_5_sensor_data	= convert_analog_channel_data(ir_prox_5_sensor_channel);
 5b8:	c8 df       	rcall	.-112    	; 0x54a <convert_analog_channel_data>
 5ba:	18 2f       	mov	r17, r24
 5bc:	48 2d       	mov	r20, r8
 5be:	50 e0       	ldi	r21, 0x00	; 0
		
		// ------------------------------- //
		
		lcd_numeric_value(1, 1, left_wl_sensor_data, 3);
 5c0:	23 e0       	ldi	r18, 0x03	; 3
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	58 de       	rcall	.-848    	; 0x27a <lcd_numeric_value>
 5ca:	4a 2d       	mov	r20, r10
 5cc:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(1, 5, center_wl_sensor_data, 3);
 5ce:	23 e0       	ldi	r18, 0x03	; 3
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	65 e0       	ldi	r22, 0x05	; 5
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	51 de       	rcall	.-862    	; 0x27a <lcd_numeric_value>
 5d8:	49 2d       	mov	r20, r9
 5da:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(1, 9, right_wl_sensor_data, 3);
 5dc:	23 e0       	ldi	r18, 0x03	; 3
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	69 e0       	ldi	r22, 0x09	; 9
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	4a de       	rcall	.-876    	; 0x27a <lcd_numeric_value>
 5e6:	4b 2d       	mov	r20, r11
 5e8:	50 e0       	ldi	r21, 0x00	; 0
		
		lcd_numeric_value(2, 1, ir_prox_3_sensor_data, 3);
 5ea:	23 e0       	ldi	r18, 0x03	; 3
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	43 de       	rcall	.-890    	; 0x27a <lcd_numeric_value>
 5f4:	40 2f       	mov	r20, r16
 5f6:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(2, 5, ir_prox_4_sensor_data, 3);
 5f8:	23 e0       	ldi	r18, 0x03	; 3
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	65 e0       	ldi	r22, 0x05	; 5
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	3c de       	rcall	.-904    	; 0x27a <lcd_numeric_value>
 602:	41 2f       	mov	r20, r17
		lcd_numeric_value(2, 9, ir_prox_5_sensor_data, 3);
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	23 e0       	ldi	r18, 0x03	; 3
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	69 e0       	ldi	r22, 0x09	; 9
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	35 de       	rcall	.-918    	; 0x27a <lcd_numeric_value>
 610:	1f 92       	push	r1
 612:	af 92       	push	r10
		
		sprintf(tx_buffer, "Center WL data: %03d\n", center_wl_sensor_data);
 614:	df 92       	push	r13
 616:	cf 92       	push	r12
 618:	ff 92       	push	r15
 61a:	ef 92       	push	r14
 61c:	61 d0       	rcall	.+194    	; 0x6e0 <sprintf>
 61e:	c7 01       	movw	r24, r14
 620:	1d d0       	rcall	.+58     	; 0x65c <uart_tx_string>
 622:	0f 90       	pop	r0
		uart_tx_string(tx_buffer);
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	b4 cf       	rjmp	.-152    	; 0x598 <main+0x36>

00000630 <uart_init>:
 630:	e1 ec       	ldi	r30, 0xC1	; 193
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	10 82       	st	Z, r1
 636:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 * Example Call: uart_tx();
 */
void uart_tx(char data)
{
	//while( ( UCSRA_reg & ( 1 << UDRE_bit ) ) == 0x00 );				// waiting to transmit	
	UDR_reg	= data;
 63a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 63e:	a2 ec       	ldi	r26, 0xC2	; 194
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	8c 91       	ld	r24, X
 644:	8f 73       	andi	r24, 0x3F	; 63
 646:	8c 93       	st	X, r24
 648:	8c 91       	ld	r24, X
 64a:	86 60       	ori	r24, 0x06	; 6
 64c:	8c 93       	st	X, r24
 64e:	80 81       	ld	r24, Z
 650:	88 61       	ori	r24, 0x18	; 24
 652:	80 83       	st	Z, r24
 654:	80 81       	ld	r24, Z
 656:	8b 7f       	andi	r24, 0xFB	; 251
 658:	80 83       	st	Z, r24
 65a:	08 95       	ret

0000065c <uart_tx_string>:
 * Output: None
 * Logic: This function sends a string over the UART
 * Example Call: uart_tx_string();
 */
void uart_tx_string(char *data)
{
 65c:	fc 01       	movw	r30, r24
	while(*data != '\0')
 65e:	90 81       	ld	r25, Z
 660:	99 23       	and	r25, r25
 662:	39 f0       	breq	.+14     	; 0x672 <uart_tx_string+0x16>
 664:	31 96       	adiw	r30, 0x01	; 1
 * Example Call: uart_tx();
 */
void uart_tx(char data)
{
	//while( ( UCSRA_reg & ( 1 << UDRE_bit ) ) == 0x00 );				// waiting to transmit	
	UDR_reg	= data;
 666:	a6 ec       	ldi	r26, 0xC6	; 198
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	9c 93       	st	X, r25
 * Logic: This function sends a string over the UART
 * Example Call: uart_tx_string();
 */
void uart_tx_string(char *data)
{
	while(*data != '\0')
 66c:	91 91       	ld	r25, Z+
 66e:	91 11       	cpse	r25, r1
 670:	fc cf       	rjmp	.-8      	; 0x66a <uart_tx_string+0xe>
 672:	08 95       	ret

00000674 <__divmodhi4>:
 674:	97 fb       	bst	r25, 7
 676:	07 2e       	mov	r0, r23
 678:	16 f4       	brtc	.+4      	; 0x67e <__divmodhi4+0xa>
 67a:	00 94       	com	r0
 67c:	06 d0       	rcall	.+12     	; 0x68a <__divmodhi4_neg1>
 67e:	77 fd       	sbrc	r23, 7
 680:	08 d0       	rcall	.+16     	; 0x692 <__divmodhi4_neg2>
 682:	1a d0       	rcall	.+52     	; 0x6b8 <__udivmodhi4>
 684:	07 fc       	sbrc	r0, 7
 686:	05 d0       	rcall	.+10     	; 0x692 <__divmodhi4_neg2>
 688:	3e f4       	brtc	.+14     	; 0x698 <__divmodhi4_exit>

0000068a <__divmodhi4_neg1>:
 68a:	90 95       	com	r25
 68c:	81 95       	neg	r24
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__divmodhi4_neg2>:
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255

00000698 <__divmodhi4_exit>:
 698:	08 95       	ret

0000069a <__umulhisi3>:
 69a:	a2 9f       	mul	r26, r18
 69c:	b0 01       	movw	r22, r0
 69e:	b3 9f       	mul	r27, r19
 6a0:	c0 01       	movw	r24, r0
 6a2:	a3 9f       	mul	r26, r19
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	b2 9f       	mul	r27, r18
 6ae:	70 0d       	add	r23, r0
 6b0:	81 1d       	adc	r24, r1
 6b2:	11 24       	eor	r1, r1
 6b4:	91 1d       	adc	r25, r1
 6b6:	08 95       	ret

000006b8 <__udivmodhi4>:
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	51 e1       	ldi	r21, 0x11	; 17
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <__udivmodhi4_ep>

000006c0 <__udivmodhi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	a6 17       	cp	r26, r22
 6c6:	b7 07       	cpc	r27, r23
 6c8:	10 f0       	brcs	.+4      	; 0x6ce <__udivmodhi4_ep>
 6ca:	a6 1b       	sub	r26, r22
 6cc:	b7 0b       	sbc	r27, r23

000006ce <__udivmodhi4_ep>:
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	5a 95       	dec	r21
 6d4:	a9 f7       	brne	.-22     	; 0x6c0 <__udivmodhi4_loop>
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	bc 01       	movw	r22, r24
 6dc:	cd 01       	movw	r24, r26
 6de:	08 95       	ret

000006e0 <sprintf>:
 6e0:	ae e0       	ldi	r26, 0x0E	; 14
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	e5 e7       	ldi	r30, 0x75	; 117
 6e6:	f3 e0       	ldi	r31, 0x03	; 3
 6e8:	aa c2       	rjmp	.+1364   	; 0xc3e <__prologue_saves__+0x1c>
 6ea:	0d 89       	ldd	r16, Y+21	; 0x15
 6ec:	1e 89       	ldd	r17, Y+22	; 0x16
 6ee:	86 e0       	ldi	r24, 0x06	; 6
 6f0:	8c 83       	std	Y+4, r24	; 0x04
 6f2:	1a 83       	std	Y+2, r17	; 0x02
 6f4:	09 83       	std	Y+1, r16	; 0x01
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	9f e7       	ldi	r25, 0x7F	; 127
 6fa:	9e 83       	std	Y+6, r25	; 0x06
 6fc:	8d 83       	std	Y+5, r24	; 0x05
 6fe:	ae 01       	movw	r20, r28
 700:	47 5e       	subi	r20, 0xE7	; 231
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	6f 89       	ldd	r22, Y+23	; 0x17
 706:	78 8d       	ldd	r23, Y+24	; 0x18
 708:	ce 01       	movw	r24, r28
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	08 d0       	rcall	.+16     	; 0x71e <vfprintf>
 70e:	ef 81       	ldd	r30, Y+7	; 0x07
 710:	f8 85       	ldd	r31, Y+8	; 0x08
 712:	e0 0f       	add	r30, r16
 714:	f1 1f       	adc	r31, r17
 716:	10 82       	st	Z, r1
 718:	2e 96       	adiw	r28, 0x0e	; 14
 71a:	e4 e0       	ldi	r30, 0x04	; 4
 71c:	ac c2       	rjmp	.+1368   	; 0xc76 <__epilogue_restores__+0x1c>

0000071e <vfprintf>:
 71e:	ab e0       	ldi	r26, 0x0B	; 11
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e4 e9       	ldi	r30, 0x94	; 148
 724:	f3 e0       	ldi	r31, 0x03	; 3
 726:	7d c2       	rjmp	.+1274   	; 0xc22 <__prologue_saves__>
 728:	6c 01       	movw	r12, r24
 72a:	7b 01       	movw	r14, r22
 72c:	8a 01       	movw	r16, r20
 72e:	fc 01       	movw	r30, r24
 730:	17 82       	std	Z+7, r1	; 0x07
 732:	16 82       	std	Z+6, r1	; 0x06
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	81 ff       	sbrs	r24, 1
 738:	bf c1       	rjmp	.+894    	; 0xab8 <__stack+0x1b9>
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	3c 01       	movw	r6, r24
 740:	f6 01       	movw	r30, r12
 742:	93 81       	ldd	r25, Z+3	; 0x03
 744:	f7 01       	movw	r30, r14
 746:	93 fd       	sbrc	r25, 3
 748:	85 91       	lpm	r24, Z+
 74a:	93 ff       	sbrs	r25, 3
 74c:	81 91       	ld	r24, Z+
 74e:	7f 01       	movw	r14, r30
 750:	88 23       	and	r24, r24
 752:	09 f4       	brne	.+2      	; 0x756 <vfprintf+0x38>
 754:	ad c1       	rjmp	.+858    	; 0xab0 <__stack+0x1b1>
 756:	85 32       	cpi	r24, 0x25	; 37
 758:	39 f4       	brne	.+14     	; 0x768 <vfprintf+0x4a>
 75a:	93 fd       	sbrc	r25, 3
 75c:	85 91       	lpm	r24, Z+
 75e:	93 ff       	sbrs	r25, 3
 760:	81 91       	ld	r24, Z+
 762:	7f 01       	movw	r14, r30
 764:	85 32       	cpi	r24, 0x25	; 37
 766:	21 f4       	brne	.+8      	; 0x770 <vfprintf+0x52>
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	c0 d1       	rcall	.+896    	; 0xaee <fputc>
 76e:	e8 cf       	rjmp	.-48     	; 0x740 <vfprintf+0x22>
 770:	91 2c       	mov	r9, r1
 772:	21 2c       	mov	r2, r1
 774:	31 2c       	mov	r3, r1
 776:	ff e1       	ldi	r31, 0x1F	; 31
 778:	f3 15       	cp	r31, r3
 77a:	d8 f0       	brcs	.+54     	; 0x7b2 <vfprintf+0x94>
 77c:	8b 32       	cpi	r24, 0x2B	; 43
 77e:	79 f0       	breq	.+30     	; 0x79e <vfprintf+0x80>
 780:	38 f4       	brcc	.+14     	; 0x790 <vfprintf+0x72>
 782:	80 32       	cpi	r24, 0x20	; 32
 784:	79 f0       	breq	.+30     	; 0x7a4 <vfprintf+0x86>
 786:	83 32       	cpi	r24, 0x23	; 35
 788:	a1 f4       	brne	.+40     	; 0x7b2 <vfprintf+0x94>
 78a:	23 2d       	mov	r18, r3
 78c:	20 61       	ori	r18, 0x10	; 16
 78e:	1d c0       	rjmp	.+58     	; 0x7ca <vfprintf+0xac>
 790:	8d 32       	cpi	r24, 0x2D	; 45
 792:	61 f0       	breq	.+24     	; 0x7ac <vfprintf+0x8e>
 794:	80 33       	cpi	r24, 0x30	; 48
 796:	69 f4       	brne	.+26     	; 0x7b2 <vfprintf+0x94>
 798:	23 2d       	mov	r18, r3
 79a:	21 60       	ori	r18, 0x01	; 1
 79c:	16 c0       	rjmp	.+44     	; 0x7ca <vfprintf+0xac>
 79e:	83 2d       	mov	r24, r3
 7a0:	82 60       	ori	r24, 0x02	; 2
 7a2:	38 2e       	mov	r3, r24
 7a4:	e3 2d       	mov	r30, r3
 7a6:	e4 60       	ori	r30, 0x04	; 4
 7a8:	3e 2e       	mov	r3, r30
 7aa:	2a c0       	rjmp	.+84     	; 0x800 <vfprintf+0xe2>
 7ac:	f3 2d       	mov	r31, r3
 7ae:	f8 60       	ori	r31, 0x08	; 8
 7b0:	1d c0       	rjmp	.+58     	; 0x7ec <vfprintf+0xce>
 7b2:	37 fc       	sbrc	r3, 7
 7b4:	2d c0       	rjmp	.+90     	; 0x810 <vfprintf+0xf2>
 7b6:	20 ed       	ldi	r18, 0xD0	; 208
 7b8:	28 0f       	add	r18, r24
 7ba:	2a 30       	cpi	r18, 0x0A	; 10
 7bc:	40 f0       	brcs	.+16     	; 0x7ce <vfprintf+0xb0>
 7be:	8e 32       	cpi	r24, 0x2E	; 46
 7c0:	b9 f4       	brne	.+46     	; 0x7f0 <vfprintf+0xd2>
 7c2:	36 fc       	sbrc	r3, 6
 7c4:	75 c1       	rjmp	.+746    	; 0xab0 <__stack+0x1b1>
 7c6:	23 2d       	mov	r18, r3
 7c8:	20 64       	ori	r18, 0x40	; 64
 7ca:	32 2e       	mov	r3, r18
 7cc:	19 c0       	rjmp	.+50     	; 0x800 <vfprintf+0xe2>
 7ce:	36 fe       	sbrs	r3, 6
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0xc0>
 7d2:	8a e0       	ldi	r24, 0x0A	; 10
 7d4:	98 9e       	mul	r9, r24
 7d6:	20 0d       	add	r18, r0
 7d8:	11 24       	eor	r1, r1
 7da:	92 2e       	mov	r9, r18
 7dc:	11 c0       	rjmp	.+34     	; 0x800 <vfprintf+0xe2>
 7de:	ea e0       	ldi	r30, 0x0A	; 10
 7e0:	2e 9e       	mul	r2, r30
 7e2:	20 0d       	add	r18, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	22 2e       	mov	r2, r18
 7e8:	f3 2d       	mov	r31, r3
 7ea:	f0 62       	ori	r31, 0x20	; 32
 7ec:	3f 2e       	mov	r3, r31
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <vfprintf+0xe2>
 7f0:	8c 36       	cpi	r24, 0x6C	; 108
 7f2:	21 f4       	brne	.+8      	; 0x7fc <vfprintf+0xde>
 7f4:	83 2d       	mov	r24, r3
 7f6:	80 68       	ori	r24, 0x80	; 128
 7f8:	38 2e       	mov	r3, r24
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <vfprintf+0xe2>
 7fc:	88 36       	cpi	r24, 0x68	; 104
 7fe:	41 f4       	brne	.+16     	; 0x810 <vfprintf+0xf2>
 800:	f7 01       	movw	r30, r14
 802:	93 fd       	sbrc	r25, 3
 804:	85 91       	lpm	r24, Z+
 806:	93 ff       	sbrs	r25, 3
 808:	81 91       	ld	r24, Z+
 80a:	7f 01       	movw	r14, r30
 80c:	81 11       	cpse	r24, r1
 80e:	b3 cf       	rjmp	.-154    	; 0x776 <vfprintf+0x58>
 810:	98 2f       	mov	r25, r24
 812:	9f 7d       	andi	r25, 0xDF	; 223
 814:	95 54       	subi	r25, 0x45	; 69
 816:	93 30       	cpi	r25, 0x03	; 3
 818:	28 f4       	brcc	.+10     	; 0x824 <vfprintf+0x106>
 81a:	0c 5f       	subi	r16, 0xFC	; 252
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	9f e3       	ldi	r25, 0x3F	; 63
 820:	99 83       	std	Y+1, r25	; 0x01
 822:	0d c0       	rjmp	.+26     	; 0x83e <vfprintf+0x120>
 824:	83 36       	cpi	r24, 0x63	; 99
 826:	31 f0       	breq	.+12     	; 0x834 <vfprintf+0x116>
 828:	83 37       	cpi	r24, 0x73	; 115
 82a:	71 f0       	breq	.+28     	; 0x848 <vfprintf+0x12a>
 82c:	83 35       	cpi	r24, 0x53	; 83
 82e:	09 f0       	breq	.+2      	; 0x832 <vfprintf+0x114>
 830:	55 c0       	rjmp	.+170    	; 0x8dc <vfprintf+0x1be>
 832:	20 c0       	rjmp	.+64     	; 0x874 <vfprintf+0x156>
 834:	f8 01       	movw	r30, r16
 836:	80 81       	ld	r24, Z
 838:	89 83       	std	Y+1, r24	; 0x01
 83a:	0e 5f       	subi	r16, 0xFE	; 254
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	88 24       	eor	r8, r8
 840:	83 94       	inc	r8
 842:	91 2c       	mov	r9, r1
 844:	53 01       	movw	r10, r6
 846:	12 c0       	rjmp	.+36     	; 0x86c <vfprintf+0x14e>
 848:	28 01       	movw	r4, r16
 84a:	f2 e0       	ldi	r31, 0x02	; 2
 84c:	4f 0e       	add	r4, r31
 84e:	51 1c       	adc	r5, r1
 850:	f8 01       	movw	r30, r16
 852:	a0 80       	ld	r10, Z
 854:	b1 80       	ldd	r11, Z+1	; 0x01
 856:	36 fe       	sbrs	r3, 6
 858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x142>
 85a:	69 2d       	mov	r22, r9
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0x146>
 860:	6f ef       	ldi	r22, 0xFF	; 255
 862:	7f ef       	ldi	r23, 0xFF	; 255
 864:	c5 01       	movw	r24, r10
 866:	38 d1       	rcall	.+624    	; 0xad8 <strnlen>
 868:	4c 01       	movw	r8, r24
 86a:	82 01       	movw	r16, r4
 86c:	f3 2d       	mov	r31, r3
 86e:	ff 77       	andi	r31, 0x7F	; 127
 870:	3f 2e       	mov	r3, r31
 872:	15 c0       	rjmp	.+42     	; 0x89e <vfprintf+0x180>
 874:	28 01       	movw	r4, r16
 876:	22 e0       	ldi	r18, 0x02	; 2
 878:	42 0e       	add	r4, r18
 87a:	51 1c       	adc	r5, r1
 87c:	f8 01       	movw	r30, r16
 87e:	a0 80       	ld	r10, Z
 880:	b1 80       	ldd	r11, Z+1	; 0x01
 882:	36 fe       	sbrs	r3, 6
 884:	03 c0       	rjmp	.+6      	; 0x88c <vfprintf+0x16e>
 886:	69 2d       	mov	r22, r9
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <vfprintf+0x172>
 88c:	6f ef       	ldi	r22, 0xFF	; 255
 88e:	7f ef       	ldi	r23, 0xFF	; 255
 890:	c5 01       	movw	r24, r10
 892:	17 d1       	rcall	.+558    	; 0xac2 <strnlen_P>
 894:	4c 01       	movw	r8, r24
 896:	f3 2d       	mov	r31, r3
 898:	f0 68       	ori	r31, 0x80	; 128
 89a:	3f 2e       	mov	r3, r31
 89c:	82 01       	movw	r16, r4
 89e:	33 fc       	sbrc	r3, 3
 8a0:	19 c0       	rjmp	.+50     	; 0x8d4 <vfprintf+0x1b6>
 8a2:	82 2d       	mov	r24, r2
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	88 16       	cp	r8, r24
 8a8:	99 06       	cpc	r9, r25
 8aa:	a0 f4       	brcc	.+40     	; 0x8d4 <vfprintf+0x1b6>
 8ac:	b6 01       	movw	r22, r12
 8ae:	80 e2       	ldi	r24, 0x20	; 32
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	1d d1       	rcall	.+570    	; 0xaee <fputc>
 8b4:	2a 94       	dec	r2
 8b6:	f5 cf       	rjmp	.-22     	; 0x8a2 <vfprintf+0x184>
 8b8:	f5 01       	movw	r30, r10
 8ba:	37 fc       	sbrc	r3, 7
 8bc:	85 91       	lpm	r24, Z+
 8be:	37 fe       	sbrs	r3, 7
 8c0:	81 91       	ld	r24, Z+
 8c2:	5f 01       	movw	r10, r30
 8c4:	b6 01       	movw	r22, r12
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	12 d1       	rcall	.+548    	; 0xaee <fputc>
 8ca:	21 10       	cpse	r2, r1
 8cc:	2a 94       	dec	r2
 8ce:	21 e0       	ldi	r18, 0x01	; 1
 8d0:	82 1a       	sub	r8, r18
 8d2:	91 08       	sbc	r9, r1
 8d4:	81 14       	cp	r8, r1
 8d6:	91 04       	cpc	r9, r1
 8d8:	79 f7       	brne	.-34     	; 0x8b8 <vfprintf+0x19a>
 8da:	e1 c0       	rjmp	.+450    	; 0xa9e <__stack+0x19f>
 8dc:	84 36       	cpi	r24, 0x64	; 100
 8de:	11 f0       	breq	.+4      	; 0x8e4 <vfprintf+0x1c6>
 8e0:	89 36       	cpi	r24, 0x69	; 105
 8e2:	39 f5       	brne	.+78     	; 0x932 <__stack+0x33>
 8e4:	f8 01       	movw	r30, r16
 8e6:	37 fe       	sbrs	r3, 7
 8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <vfprintf+0x1da>
 8ea:	60 81       	ld	r22, Z
 8ec:	71 81       	ldd	r23, Z+1	; 0x01
 8ee:	82 81       	ldd	r24, Z+2	; 0x02
 8f0:	93 81       	ldd	r25, Z+3	; 0x03
 8f2:	0c 5f       	subi	r16, 0xFC	; 252
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <__stack+0x9>
 8f8:	60 81       	ld	r22, Z
 8fa:	71 81       	ldd	r23, Z+1	; 0x01
 8fc:	07 2e       	mov	r0, r23
 8fe:	00 0c       	add	r0, r0
 900:	88 0b       	sbc	r24, r24
 902:	99 0b       	sbc	r25, r25
 904:	0e 5f       	subi	r16, 0xFE	; 254
 906:	1f 4f       	sbci	r17, 0xFF	; 255
 908:	f3 2d       	mov	r31, r3
 90a:	ff 76       	andi	r31, 0x6F	; 111
 90c:	3f 2e       	mov	r3, r31
 90e:	97 ff       	sbrs	r25, 7
 910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0x25>
 912:	90 95       	com	r25
 914:	80 95       	com	r24
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	f0 68       	ori	r31, 0x80	; 128
 922:	3f 2e       	mov	r3, r31
 924:	2a e0       	ldi	r18, 0x0A	; 10
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	a3 01       	movw	r20, r6
 92a:	1d d1       	rcall	.+570    	; 0xb66 <__ultoa_invert>
 92c:	88 2e       	mov	r8, r24
 92e:	86 18       	sub	r8, r6
 930:	44 c0       	rjmp	.+136    	; 0x9ba <__stack+0xbb>
 932:	85 37       	cpi	r24, 0x75	; 117
 934:	31 f4       	brne	.+12     	; 0x942 <__stack+0x43>
 936:	23 2d       	mov	r18, r3
 938:	2f 7e       	andi	r18, 0xEF	; 239
 93a:	b2 2e       	mov	r11, r18
 93c:	2a e0       	ldi	r18, 0x0A	; 10
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	25 c0       	rjmp	.+74     	; 0x98c <__stack+0x8d>
 942:	93 2d       	mov	r25, r3
 944:	99 7f       	andi	r25, 0xF9	; 249
 946:	b9 2e       	mov	r11, r25
 948:	8f 36       	cpi	r24, 0x6F	; 111
 94a:	c1 f0       	breq	.+48     	; 0x97c <__stack+0x7d>
 94c:	18 f4       	brcc	.+6      	; 0x954 <__stack+0x55>
 94e:	88 35       	cpi	r24, 0x58	; 88
 950:	79 f0       	breq	.+30     	; 0x970 <__stack+0x71>
 952:	ae c0       	rjmp	.+348    	; 0xab0 <__stack+0x1b1>
 954:	80 37       	cpi	r24, 0x70	; 112
 956:	19 f0       	breq	.+6      	; 0x95e <__stack+0x5f>
 958:	88 37       	cpi	r24, 0x78	; 120
 95a:	21 f0       	breq	.+8      	; 0x964 <__stack+0x65>
 95c:	a9 c0       	rjmp	.+338    	; 0xab0 <__stack+0x1b1>
 95e:	e9 2f       	mov	r30, r25
 960:	e0 61       	ori	r30, 0x10	; 16
 962:	be 2e       	mov	r11, r30
 964:	b4 fe       	sbrs	r11, 4
 966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x83>
 968:	fb 2d       	mov	r31, r11
 96a:	f4 60       	ori	r31, 0x04	; 4
 96c:	bf 2e       	mov	r11, r31
 96e:	09 c0       	rjmp	.+18     	; 0x982 <__stack+0x83>
 970:	34 fe       	sbrs	r3, 4
 972:	0a c0       	rjmp	.+20     	; 0x988 <__stack+0x89>
 974:	29 2f       	mov	r18, r25
 976:	26 60       	ori	r18, 0x06	; 6
 978:	b2 2e       	mov	r11, r18
 97a:	06 c0       	rjmp	.+12     	; 0x988 <__stack+0x89>
 97c:	28 e0       	ldi	r18, 0x08	; 8
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	05 c0       	rjmp	.+10     	; 0x98c <__stack+0x8d>
 982:	20 e1       	ldi	r18, 0x10	; 16
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
 988:	20 e1       	ldi	r18, 0x10	; 16
 98a:	32 e0       	ldi	r19, 0x02	; 2
 98c:	f8 01       	movw	r30, r16
 98e:	b7 fe       	sbrs	r11, 7
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <__stack+0xa1>
 992:	60 81       	ld	r22, Z
 994:	71 81       	ldd	r23, Z+1	; 0x01
 996:	82 81       	ldd	r24, Z+2	; 0x02
 998:	93 81       	ldd	r25, Z+3	; 0x03
 99a:	0c 5f       	subi	r16, 0xFC	; 252
 99c:	1f 4f       	sbci	r17, 0xFF	; 255
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <__stack+0xad>
 9a0:	60 81       	ld	r22, Z
 9a2:	71 81       	ldd	r23, Z+1	; 0x01
 9a4:	80 e0       	ldi	r24, 0x00	; 0
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 5f       	subi	r16, 0xFE	; 254
 9aa:	1f 4f       	sbci	r17, 0xFF	; 255
 9ac:	a3 01       	movw	r20, r6
 9ae:	db d0       	rcall	.+438    	; 0xb66 <__ultoa_invert>
 9b0:	88 2e       	mov	r8, r24
 9b2:	86 18       	sub	r8, r6
 9b4:	fb 2d       	mov	r31, r11
 9b6:	ff 77       	andi	r31, 0x7F	; 127
 9b8:	3f 2e       	mov	r3, r31
 9ba:	36 fe       	sbrs	r3, 6
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__stack+0xd9>
 9be:	23 2d       	mov	r18, r3
 9c0:	2e 7f       	andi	r18, 0xFE	; 254
 9c2:	a2 2e       	mov	r10, r18
 9c4:	89 14       	cp	r8, r9
 9c6:	58 f4       	brcc	.+22     	; 0x9de <__stack+0xdf>
 9c8:	34 fe       	sbrs	r3, 4
 9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <__stack+0xe3>
 9cc:	32 fc       	sbrc	r3, 2
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__stack+0xe3>
 9d0:	83 2d       	mov	r24, r3
 9d2:	8e 7e       	andi	r24, 0xEE	; 238
 9d4:	a8 2e       	mov	r10, r24
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__stack+0xe3>
 9d8:	b8 2c       	mov	r11, r8
 9da:	a3 2c       	mov	r10, r3
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <__stack+0xe5>
 9de:	b8 2c       	mov	r11, r8
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <__stack+0xe5>
 9e2:	b9 2c       	mov	r11, r9
 9e4:	a4 fe       	sbrs	r10, 4
 9e6:	0f c0       	rjmp	.+30     	; 0xa06 <__stack+0x107>
 9e8:	fe 01       	movw	r30, r28
 9ea:	e8 0d       	add	r30, r8
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	80 33       	cpi	r24, 0x30	; 48
 9f2:	21 f4       	brne	.+8      	; 0x9fc <__stack+0xfd>
 9f4:	9a 2d       	mov	r25, r10
 9f6:	99 7e       	andi	r25, 0xE9	; 233
 9f8:	a9 2e       	mov	r10, r25
 9fa:	09 c0       	rjmp	.+18     	; 0xa0e <__stack+0x10f>
 9fc:	a2 fe       	sbrs	r10, 2
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <__stack+0x10d>
 a00:	b3 94       	inc	r11
 a02:	b3 94       	inc	r11
 a04:	04 c0       	rjmp	.+8      	; 0xa0e <__stack+0x10f>
 a06:	8a 2d       	mov	r24, r10
 a08:	86 78       	andi	r24, 0x86	; 134
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
 a0c:	b3 94       	inc	r11
 a0e:	a3 fc       	sbrc	r10, 3
 a10:	10 c0       	rjmp	.+32     	; 0xa32 <__stack+0x133>
 a12:	a0 fe       	sbrs	r10, 0
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <__stack+0x123>
 a16:	b2 14       	cp	r11, r2
 a18:	80 f4       	brcc	.+32     	; 0xa3a <__stack+0x13b>
 a1a:	28 0c       	add	r2, r8
 a1c:	92 2c       	mov	r9, r2
 a1e:	9b 18       	sub	r9, r11
 a20:	0d c0       	rjmp	.+26     	; 0xa3c <__stack+0x13d>
 a22:	b2 14       	cp	r11, r2
 a24:	58 f4       	brcc	.+22     	; 0xa3c <__stack+0x13d>
 a26:	b6 01       	movw	r22, r12
 a28:	80 e2       	ldi	r24, 0x20	; 32
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	60 d0       	rcall	.+192    	; 0xaee <fputc>
 a2e:	b3 94       	inc	r11
 a30:	f8 cf       	rjmp	.-16     	; 0xa22 <__stack+0x123>
 a32:	b2 14       	cp	r11, r2
 a34:	18 f4       	brcc	.+6      	; 0xa3c <__stack+0x13d>
 a36:	2b 18       	sub	r2, r11
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
 a3a:	98 2c       	mov	r9, r8
 a3c:	21 2c       	mov	r2, r1
 a3e:	a4 fe       	sbrs	r10, 4
 a40:	0f c0       	rjmp	.+30     	; 0xa60 <__stack+0x161>
 a42:	b6 01       	movw	r22, r12
 a44:	80 e3       	ldi	r24, 0x30	; 48
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	52 d0       	rcall	.+164    	; 0xaee <fputc>
 a4a:	a2 fe       	sbrs	r10, 2
 a4c:	16 c0       	rjmp	.+44     	; 0xa7a <__stack+0x17b>
 a4e:	a1 fc       	sbrc	r10, 1
 a50:	03 c0       	rjmp	.+6      	; 0xa58 <__stack+0x159>
 a52:	88 e7       	ldi	r24, 0x78	; 120
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <__stack+0x15d>
 a58:	88 e5       	ldi	r24, 0x58	; 88
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	b6 01       	movw	r22, r12
 a5e:	0c c0       	rjmp	.+24     	; 0xa78 <__stack+0x179>
 a60:	8a 2d       	mov	r24, r10
 a62:	86 78       	andi	r24, 0x86	; 134
 a64:	51 f0       	breq	.+20     	; 0xa7a <__stack+0x17b>
 a66:	a1 fe       	sbrs	r10, 1
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
 a6a:	8b e2       	ldi	r24, 0x2B	; 43
 a6c:	01 c0       	rjmp	.+2      	; 0xa70 <__stack+0x171>
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	a7 fc       	sbrc	r10, 7
 a72:	8d e2       	ldi	r24, 0x2D	; 45
 a74:	b6 01       	movw	r22, r12
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	3a d0       	rcall	.+116    	; 0xaee <fputc>
 a7a:	89 14       	cp	r8, r9
 a7c:	30 f4       	brcc	.+12     	; 0xa8a <__stack+0x18b>
 a7e:	b6 01       	movw	r22, r12
 a80:	80 e3       	ldi	r24, 0x30	; 48
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	34 d0       	rcall	.+104    	; 0xaee <fputc>
 a86:	9a 94       	dec	r9
 a88:	f8 cf       	rjmp	.-16     	; 0xa7a <__stack+0x17b>
 a8a:	8a 94       	dec	r8
 a8c:	f3 01       	movw	r30, r6
 a8e:	e8 0d       	add	r30, r8
 a90:	f1 1d       	adc	r31, r1
 a92:	80 81       	ld	r24, Z
 a94:	b6 01       	movw	r22, r12
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	2a d0       	rcall	.+84     	; 0xaee <fputc>
 a9a:	81 10       	cpse	r8, r1
 a9c:	f6 cf       	rjmp	.-20     	; 0xa8a <__stack+0x18b>
 a9e:	22 20       	and	r2, r2
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__stack+0x1a5>
 aa2:	4e ce       	rjmp	.-868    	; 0x740 <vfprintf+0x22>
 aa4:	b6 01       	movw	r22, r12
 aa6:	80 e2       	ldi	r24, 0x20	; 32
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	21 d0       	rcall	.+66     	; 0xaee <fputc>
 aac:	2a 94       	dec	r2
 aae:	f7 cf       	rjmp	.-18     	; 0xa9e <__stack+0x19f>
 ab0:	f6 01       	movw	r30, r12
 ab2:	86 81       	ldd	r24, Z+6	; 0x06
 ab4:	97 81       	ldd	r25, Z+7	; 0x07
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <__stack+0x1bd>
 ab8:	8f ef       	ldi	r24, 0xFF	; 255
 aba:	9f ef       	ldi	r25, 0xFF	; 255
 abc:	2b 96       	adiw	r28, 0x0b	; 11
 abe:	e2 e1       	ldi	r30, 0x12	; 18
 ac0:	cc c0       	rjmp	.+408    	; 0xc5a <__epilogue_restores__>

00000ac2 <strnlen_P>:
 ac2:	fc 01       	movw	r30, r24
 ac4:	05 90       	lpm	r0, Z+
 ac6:	61 50       	subi	r22, 0x01	; 1
 ac8:	70 40       	sbci	r23, 0x00	; 0
 aca:	01 10       	cpse	r0, r1
 acc:	d8 f7       	brcc	.-10     	; 0xac4 <strnlen_P+0x2>
 ace:	80 95       	com	r24
 ad0:	90 95       	com	r25
 ad2:	8e 0f       	add	r24, r30
 ad4:	9f 1f       	adc	r25, r31
 ad6:	08 95       	ret

00000ad8 <strnlen>:
 ad8:	fc 01       	movw	r30, r24
 ada:	61 50       	subi	r22, 0x01	; 1
 adc:	70 40       	sbci	r23, 0x00	; 0
 ade:	01 90       	ld	r0, Z+
 ae0:	01 10       	cpse	r0, r1
 ae2:	d8 f7       	brcc	.-10     	; 0xada <strnlen+0x2>
 ae4:	80 95       	com	r24
 ae6:	90 95       	com	r25
 ae8:	8e 0f       	add	r24, r30
 aea:	9f 1f       	adc	r25, r31
 aec:	08 95       	ret

00000aee <fputc>:
 aee:	0f 93       	push	r16
 af0:	1f 93       	push	r17
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	fb 01       	movw	r30, r22
 af8:	23 81       	ldd	r18, Z+3	; 0x03
 afa:	21 fd       	sbrc	r18, 1
 afc:	03 c0       	rjmp	.+6      	; 0xb04 <fputc+0x16>
 afe:	8f ef       	ldi	r24, 0xFF	; 255
 b00:	9f ef       	ldi	r25, 0xFF	; 255
 b02:	2c c0       	rjmp	.+88     	; 0xb5c <fputc+0x6e>
 b04:	22 ff       	sbrs	r18, 2
 b06:	16 c0       	rjmp	.+44     	; 0xb34 <fputc+0x46>
 b08:	46 81       	ldd	r20, Z+6	; 0x06
 b0a:	57 81       	ldd	r21, Z+7	; 0x07
 b0c:	24 81       	ldd	r18, Z+4	; 0x04
 b0e:	35 81       	ldd	r19, Z+5	; 0x05
 b10:	42 17       	cp	r20, r18
 b12:	53 07       	cpc	r21, r19
 b14:	44 f4       	brge	.+16     	; 0xb26 <fputc+0x38>
 b16:	a0 81       	ld	r26, Z
 b18:	b1 81       	ldd	r27, Z+1	; 0x01
 b1a:	9d 01       	movw	r18, r26
 b1c:	2f 5f       	subi	r18, 0xFF	; 255
 b1e:	3f 4f       	sbci	r19, 0xFF	; 255
 b20:	31 83       	std	Z+1, r19	; 0x01
 b22:	20 83       	st	Z, r18
 b24:	8c 93       	st	X, r24
 b26:	26 81       	ldd	r18, Z+6	; 0x06
 b28:	37 81       	ldd	r19, Z+7	; 0x07
 b2a:	2f 5f       	subi	r18, 0xFF	; 255
 b2c:	3f 4f       	sbci	r19, 0xFF	; 255
 b2e:	37 83       	std	Z+7, r19	; 0x07
 b30:	26 83       	std	Z+6, r18	; 0x06
 b32:	14 c0       	rjmp	.+40     	; 0xb5c <fputc+0x6e>
 b34:	8b 01       	movw	r16, r22
 b36:	ec 01       	movw	r28, r24
 b38:	fb 01       	movw	r30, r22
 b3a:	00 84       	ldd	r0, Z+8	; 0x08
 b3c:	f1 85       	ldd	r31, Z+9	; 0x09
 b3e:	e0 2d       	mov	r30, r0
 b40:	09 95       	icall
 b42:	89 2b       	or	r24, r25
 b44:	e1 f6       	brne	.-72     	; 0xafe <fputc+0x10>
 b46:	d8 01       	movw	r26, r16
 b48:	16 96       	adiw	r26, 0x06	; 6
 b4a:	8d 91       	ld	r24, X+
 b4c:	9c 91       	ld	r25, X
 b4e:	17 97       	sbiw	r26, 0x07	; 7
 b50:	01 96       	adiw	r24, 0x01	; 1
 b52:	17 96       	adiw	r26, 0x07	; 7
 b54:	9c 93       	st	X, r25
 b56:	8e 93       	st	-X, r24
 b58:	16 97       	sbiw	r26, 0x06	; 6
 b5a:	ce 01       	movw	r24, r28
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	08 95       	ret

00000b66 <__ultoa_invert>:
 b66:	fa 01       	movw	r30, r20
 b68:	aa 27       	eor	r26, r26
 b6a:	28 30       	cpi	r18, 0x08	; 8
 b6c:	51 f1       	breq	.+84     	; 0xbc2 <__ultoa_invert+0x5c>
 b6e:	20 31       	cpi	r18, 0x10	; 16
 b70:	81 f1       	breq	.+96     	; 0xbd2 <__ultoa_invert+0x6c>
 b72:	e8 94       	clt
 b74:	6f 93       	push	r22
 b76:	6e 7f       	andi	r22, 0xFE	; 254
 b78:	6e 5f       	subi	r22, 0xFE	; 254
 b7a:	7f 4f       	sbci	r23, 0xFF	; 255
 b7c:	8f 4f       	sbci	r24, 0xFF	; 255
 b7e:	9f 4f       	sbci	r25, 0xFF	; 255
 b80:	af 4f       	sbci	r26, 0xFF	; 255
 b82:	b1 e0       	ldi	r27, 0x01	; 1
 b84:	3e d0       	rcall	.+124    	; 0xc02 <__ultoa_invert+0x9c>
 b86:	b4 e0       	ldi	r27, 0x04	; 4
 b88:	3c d0       	rcall	.+120    	; 0xc02 <__ultoa_invert+0x9c>
 b8a:	67 0f       	add	r22, r23
 b8c:	78 1f       	adc	r23, r24
 b8e:	89 1f       	adc	r24, r25
 b90:	9a 1f       	adc	r25, r26
 b92:	a1 1d       	adc	r26, r1
 b94:	68 0f       	add	r22, r24
 b96:	79 1f       	adc	r23, r25
 b98:	8a 1f       	adc	r24, r26
 b9a:	91 1d       	adc	r25, r1
 b9c:	a1 1d       	adc	r26, r1
 b9e:	6a 0f       	add	r22, r26
 ba0:	71 1d       	adc	r23, r1
 ba2:	81 1d       	adc	r24, r1
 ba4:	91 1d       	adc	r25, r1
 ba6:	a1 1d       	adc	r26, r1
 ba8:	20 d0       	rcall	.+64     	; 0xbea <__ultoa_invert+0x84>
 baa:	09 f4       	brne	.+2      	; 0xbae <__ultoa_invert+0x48>
 bac:	68 94       	set
 bae:	3f 91       	pop	r19
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	26 9f       	mul	r18, r22
 bb4:	11 24       	eor	r1, r1
 bb6:	30 19       	sub	r19, r0
 bb8:	30 5d       	subi	r19, 0xD0	; 208
 bba:	31 93       	st	Z+, r19
 bbc:	de f6       	brtc	.-74     	; 0xb74 <__ultoa_invert+0xe>
 bbe:	cf 01       	movw	r24, r30
 bc0:	08 95       	ret
 bc2:	46 2f       	mov	r20, r22
 bc4:	47 70       	andi	r20, 0x07	; 7
 bc6:	40 5d       	subi	r20, 0xD0	; 208
 bc8:	41 93       	st	Z+, r20
 bca:	b3 e0       	ldi	r27, 0x03	; 3
 bcc:	0f d0       	rcall	.+30     	; 0xbec <__ultoa_invert+0x86>
 bce:	c9 f7       	brne	.-14     	; 0xbc2 <__ultoa_invert+0x5c>
 bd0:	f6 cf       	rjmp	.-20     	; 0xbbe <__ultoa_invert+0x58>
 bd2:	46 2f       	mov	r20, r22
 bd4:	4f 70       	andi	r20, 0x0F	; 15
 bd6:	40 5d       	subi	r20, 0xD0	; 208
 bd8:	4a 33       	cpi	r20, 0x3A	; 58
 bda:	18 f0       	brcs	.+6      	; 0xbe2 <__ultoa_invert+0x7c>
 bdc:	49 5d       	subi	r20, 0xD9	; 217
 bde:	31 fd       	sbrc	r19, 1
 be0:	40 52       	subi	r20, 0x20	; 32
 be2:	41 93       	st	Z+, r20
 be4:	02 d0       	rcall	.+4      	; 0xbea <__ultoa_invert+0x84>
 be6:	a9 f7       	brne	.-22     	; 0xbd2 <__ultoa_invert+0x6c>
 be8:	ea cf       	rjmp	.-44     	; 0xbbe <__ultoa_invert+0x58>
 bea:	b4 e0       	ldi	r27, 0x04	; 4
 bec:	a6 95       	lsr	r26
 bee:	97 95       	ror	r25
 bf0:	87 95       	ror	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	ba 95       	dec	r27
 bf8:	c9 f7       	brne	.-14     	; 0xbec <__ultoa_invert+0x86>
 bfa:	00 97       	sbiw	r24, 0x00	; 0
 bfc:	61 05       	cpc	r22, r1
 bfe:	71 05       	cpc	r23, r1
 c00:	08 95       	ret
 c02:	9b 01       	movw	r18, r22
 c04:	ac 01       	movw	r20, r24
 c06:	0a 2e       	mov	r0, r26
 c08:	06 94       	lsr	r0
 c0a:	57 95       	ror	r21
 c0c:	47 95       	ror	r20
 c0e:	37 95       	ror	r19
 c10:	27 95       	ror	r18
 c12:	ba 95       	dec	r27
 c14:	c9 f7       	brne	.-14     	; 0xc08 <__ultoa_invert+0xa2>
 c16:	62 0f       	add	r22, r18
 c18:	73 1f       	adc	r23, r19
 c1a:	84 1f       	adc	r24, r20
 c1c:	95 1f       	adc	r25, r21
 c1e:	a0 1d       	adc	r26, r0
 c20:	08 95       	ret

00000c22 <__prologue_saves__>:
 c22:	2f 92       	push	r2
 c24:	3f 92       	push	r3
 c26:	4f 92       	push	r4
 c28:	5f 92       	push	r5
 c2a:	6f 92       	push	r6
 c2c:	7f 92       	push	r7
 c2e:	8f 92       	push	r8
 c30:	9f 92       	push	r9
 c32:	af 92       	push	r10
 c34:	bf 92       	push	r11
 c36:	cf 92       	push	r12
 c38:	df 92       	push	r13
 c3a:	ef 92       	push	r14
 c3c:	ff 92       	push	r15
 c3e:	0f 93       	push	r16
 c40:	1f 93       	push	r17
 c42:	cf 93       	push	r28
 c44:	df 93       	push	r29
 c46:	cd b7       	in	r28, 0x3d	; 61
 c48:	de b7       	in	r29, 0x3e	; 62
 c4a:	ca 1b       	sub	r28, r26
 c4c:	db 0b       	sbc	r29, r27
 c4e:	0f b6       	in	r0, 0x3f	; 63
 c50:	f8 94       	cli
 c52:	de bf       	out	0x3e, r29	; 62
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	cd bf       	out	0x3d, r28	; 61
 c58:	09 94       	ijmp

00000c5a <__epilogue_restores__>:
 c5a:	2a 88       	ldd	r2, Y+18	; 0x12
 c5c:	39 88       	ldd	r3, Y+17	; 0x11
 c5e:	48 88       	ldd	r4, Y+16	; 0x10
 c60:	5f 84       	ldd	r5, Y+15	; 0x0f
 c62:	6e 84       	ldd	r6, Y+14	; 0x0e
 c64:	7d 84       	ldd	r7, Y+13	; 0x0d
 c66:	8c 84       	ldd	r8, Y+12	; 0x0c
 c68:	9b 84       	ldd	r9, Y+11	; 0x0b
 c6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c6c:	b9 84       	ldd	r11, Y+9	; 0x09
 c6e:	c8 84       	ldd	r12, Y+8	; 0x08
 c70:	df 80       	ldd	r13, Y+7	; 0x07
 c72:	ee 80       	ldd	r14, Y+6	; 0x06
 c74:	fd 80       	ldd	r15, Y+5	; 0x05
 c76:	0c 81       	ldd	r16, Y+4	; 0x04
 c78:	1b 81       	ldd	r17, Y+3	; 0x03
 c7a:	aa 81       	ldd	r26, Y+2	; 0x02
 c7c:	b9 81       	ldd	r27, Y+1	; 0x01
 c7e:	ce 0f       	add	r28, r30
 c80:	d1 1d       	adc	r29, r1
 c82:	0f b6       	in	r0, 0x3f	; 63
 c84:	f8 94       	cli
 c86:	de bf       	out	0x3e, r29	; 62
 c88:	0f be       	out	0x3f, r0	; 63
 c8a:	cd bf       	out	0x3d, r28	; 61
 c8c:	ed 01       	movw	r28, r26
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
