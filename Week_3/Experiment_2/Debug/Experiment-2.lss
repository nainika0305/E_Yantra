
Experiment-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001008  0000109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  000010bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001210  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093a  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093d  00000000  00000000  00002d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000036d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  000038c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ca  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b4 c0       	rjmp	.+360    	; 0x16a <__ctors_end>
       2:	00 00       	nop
       4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c0       	rjmp	.+374    	; 0x1a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c0       	rjmp	.+370    	; 0x1a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c0       	rjmp	.+346    	; 0x1a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__vector_21>
      56:	00 00       	nop
      58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c0       	rjmp	.+314    	; 0x1a0 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e8 e0       	ldi	r30, 0x08	; 8
     17e:	f0 e1       	ldi	r31, 0x10	; 16
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 32       	cpi	r26, 0x20	; 32
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	a0 e2       	ldi	r26, 0x20	; 32
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 32       	cpi	r26, 0x22	; 34
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	9c d0       	rcall	.+312    	; 0x2d6 <main>
     19e:	32 c7       	rjmp	.+3684   	; 0x1004 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <sharp_sensor_pin_config>:
 */
void sharp_sensor_pin_config(){
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Make **ONLY** 2nd Sharp sensor pin as input
	sharp_sensor_ddr_reg	&=~(1<<sharp_sensor_pin) ;
     1a2:	38 98       	cbi	0x07, 0	; 7
	
	// Deactivate pull-up for **ONLY** 2nd Sharp sensor pin
	sharp_sensor_port_reg	&=~(1<<sharp_sensor_pin) ;
     1a4:	40 98       	cbi	0x08, 0	; 8
     1a6:	08 95       	ret

000001a8 <adc_init>:
 */
void adc_init(){
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Clear the Global Interrupt Flag bit in SREG
	cli();
     1a8:	f8 94       	cli
	
	// In ADCSRA, enable ADC, ADC Interrupt and pre-scalar = 64 
	//				and clear ADC start conversion bit, auto trigger enable bit, interrupt flag bit and interrupt enable bit
	ADCSRA_reg	|= ( (1<<ADEN_bit)|(1<<ADIE_bit)| (1<<ADPS2_bit) | (1<<ADPS1_bit)) ;
     1aa:	ea e7       	ldi	r30, 0x7A	; 122
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8e 68       	ori	r24, 0x8E	; 142
     1b2:	80 83       	st	Z, r24
	ADCSRA_reg &=~( (1<<ADSC_bit)|(1<<ADATE_bit)|(1<<ADIF_bit)| (1<<ADPS0_bit) );	
     1b4:	80 81       	ld	r24, Z
     1b6:	8e 78       	andi	r24, 0x8E	; 142
     1b8:	80 83       	st	Z, r24
	// In ADCSRB, disable Analog Comparator Multiplexer, MUX5 bit and ADC Auto Trigger Source bits
	ADCSRB_reg	&=~( (1<<ACME_bit)|(1<<MUX5_bit)|(1<<ADTS0_bit)|(1<<ADTS1_bit)|(1<<ADTS2_bit)) ;
     1ba:	eb e7       	ldi	r30, 0x7B	; 123
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	80 7b       	andi	r24, 0xB0	; 176
     1c2:	80 83       	st	Z, r24
	
	// In ADMUX, set the Reference Selection bits to use the AVCC as reference, and clear the channel selection bits MUX[4:0] initially
	ADMUX_reg	&=~( (1<<MUX0_bit)|(1<<MUX1_bit)|(1<<MUX4_bit)|(1<<MUX2_bit)|(1<<MUX3_bit)|(1<<REFS1_bit)) ;
     1c4:	ec e7       	ldi	r30, 0x7C	; 124
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 76       	andi	r24, 0x60	; 96
     1cc:	80 83       	st	Z, r24
	ADMUX_reg	|= (1<<REFS0_bit);
     1ce:	80 81       	ld	r24, Z
     1d0:	80 64       	ori	r24, 0x40	; 64
     1d2:	80 83       	st	Z, r24
	
	// In ADMUX, disable or enable the ADLAR bit to read 10-bit ADC result based on your logic
	ADMUX_reg	&=~ (1<<ADLAR_bit) ;
     1d4:	80 81       	ld	r24, Z
     1d6:	8f 7d       	andi	r24, 0xDF	; 223
     1d8:	80 83       	st	Z, r24
	
	// In ACSR, disable the Analog Comparator by writing 1 to ACD_bit
	ACSR_reg	|=(1<<ACD_bit) ;
     1da:	80 b7       	in	r24, 0x30	; 48
     1dc:	80 68       	ori	r24, 0x80	; 128
     1de:	80 bf       	out	0x30, r24	; 48
	
	// Set the Global Interrupt Flag bit in SREG
	sei();
     1e0:	78 94       	sei
     1e2:	08 95       	ret

000001e4 <select_adc_channel>:
 */
void select_adc_channel( unsigned char channel_num ){
	// << NOTE >> : Use Masking and Shift Operators here

	// set the MUX[5:0] bits to select the ADC channel number
	if (channel_num > 15)
     1e4:	80 31       	cpi	r24, 0x10	; 16
     1e6:	40 f4       	brcc	.+16     	; 0x1f8 <select_adc_channel+0x14>
	channel_num = 0; // set to the default channel 0 if out of range
	
	
	if (channel_num > 7)
     1e8:	88 30       	cpi	r24, 0x08	; 8
     1ea:	38 f0       	brcs	.+14     	; 0x1fa <select_adc_channel+0x16>
	ADCSRB_reg |= (1<<MUX5_bit);
     1ec:	eb e7       	ldi	r30, 0x7B	; 123
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	90 81       	ld	r25, Z
     1f2:	98 60       	ori	r25, 0x08	; 8
     1f4:	90 83       	st	Z, r25
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <select_adc_channel+0x20>
void select_adc_channel( unsigned char channel_num ){
	// << NOTE >> : Use Masking and Shift Operators here

	// set the MUX[5:0] bits to select the ADC channel number
	if (channel_num > 15)
	channel_num = 0; // set to the default channel 0 if out of range
     1f8:	80 e0       	ldi	r24, 0x00	; 0
	
	
	if (channel_num > 7)
	ADCSRB_reg |= (1<<MUX5_bit);
	else
	ADCSRB_reg &=~(1<<MUX5_bit);
     1fa:	eb e7       	ldi	r30, 0x7B	; 123
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	90 81       	ld	r25, Z
     200:	97 7f       	andi	r25, 0xF7	; 247
     202:	90 83       	st	Z, r25
	
	if ((channel_num>=0 && channel_num <4 ) || ( channel_num>=8 && channel_num<12))
     204:	98 2f       	mov	r25, r24
     206:	97 7f       	andi	r25, 0xF7	; 247
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	30 f4       	brcc	.+12     	; 0x218 <select_adc_channel+0x34>
	ADMUX_reg &=~(1<<MUX2_bit);
     20c:	ec e7       	ldi	r30, 0x7C	; 124
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	90 81       	ld	r25, Z
     212:	9b 7f       	andi	r25, 0xFB	; 251
     214:	90 83       	st	Z, r25
     216:	05 c0       	rjmp	.+10     	; 0x222 <select_adc_channel+0x3e>
	else
	ADMUX_reg |=(1<<MUX2_bit);
     218:	ec e7       	ldi	r30, 0x7C	; 124
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	90 81       	ld	r25, Z
     21e:	94 60       	ori	r25, 0x04	; 4
     220:	90 83       	st	Z, r25
	
	if ((channel_num%4==0) || ((channel_num-1)%4==0))
     222:	98 2f       	mov	r25, r24
     224:	93 70       	andi	r25, 0x03	; 3
     226:	41 f0       	breq	.+16     	; 0x238 <select_adc_channel+0x54>
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	31 09       	sbc	r19, r1
     230:	23 70       	andi	r18, 0x03	; 3
     232:	33 27       	eor	r19, r19
     234:	23 2b       	or	r18, r19
     236:	31 f4       	brne	.+12     	; 0x244 <select_adc_channel+0x60>
	ADMUX_reg&=~(1<<MUX1_bit);
     238:	ec e7       	ldi	r30, 0x7C	; 124
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	90 81       	ld	r25, Z
     23e:	9d 7f       	andi	r25, 0xFD	; 253
     240:	90 83       	st	Z, r25
     242:	05 c0       	rjmp	.+10     	; 0x24e <select_adc_channel+0x6a>
	else
	ADMUX_reg |= (1<<MUX1_bit);
     244:	ec e7       	ldi	r30, 0x7C	; 124
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	90 81       	ld	r25, Z
     24a:	92 60       	ori	r25, 0x02	; 2
     24c:	90 83       	st	Z, r25
	
	if (channel_num%2==0)
     24e:	80 fd       	sbrc	r24, 0
     250:	06 c0       	rjmp	.+12     	; 0x25e <select_adc_channel+0x7a>
	ADMUX_reg&= ~(1<<MUX0_bit);
     252:	ec e7       	ldi	r30, 0x7C	; 124
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	8e 7f       	andi	r24, 0xFE	; 254
     25a:	80 83       	st	Z, r24
     25c:	08 95       	ret
	else
	ADMUX_reg|=(1<<MUX0_bit);
     25e:	ec e7       	ldi	r30, 0x7C	; 124
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	81 60       	ori	r24, 0x01	; 1
     266:	80 83       	st	Z, r24
     268:	08 95       	ret

0000026a <start_adc>:
 */
void start_adc(void){
	// << NOTE >> : Use Masking and Shift Operators here
	
	// set the ADSC bit in ADCSRA register
	ADCSRA_reg |=(1<<ADSC_bit);
     26a:	ea e7       	ldi	r30, 0x7A	; 122
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 64       	ori	r24, 0x40	; 64
     272:	80 83       	st	Z, r24
     274:	08 95       	ret

00000276 <reset_adc_config_registers>:
 */
void reset_adc_config_registers(void){
	// << NOTE >> : Use Masking and Shift Operators here

	// clear the MUX5 bit for next conversion
	ADCSRB_reg &=~(1<<MUX5_bit) ;
     276:	eb e7       	ldi	r30, 0x7B	; 123
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	87 7f       	andi	r24, 0xF7	; 247
     27e:	80 83       	st	Z, r24

	// clear the MUX[4:0] bits for next conversion
	ADMUX_reg &=~( (1<<MUX0_bit)|(1<<MUX1_bit)|(1<<MUX4_bit)|(1<<MUX2_bit)|(1<<MUX3_bit));
     280:	ec e7       	ldi	r30, 0x7C	; 124
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	80 7e       	andi	r24, 0xE0	; 224
     288:	80 83       	st	Z, r24
     28a:	08 95       	ret

0000028c <__vector_21>:
}


// read the ADC data after the conversion is complete
ISR( ADC_vect ){
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25

	adc_10bit_data |= ((ADCL_reg)|(ADCH_reg<<8)) ;
     29e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     2a2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	92 2b       	or	r25, r18
     2aa:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__data_end>
     2ae:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__data_end+0x1>
     2b2:	82 2b       	or	r24, r18
     2b4:	93 2b       	or	r25, r19
     2b6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     2ba:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>

}
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	3f 91       	pop	r19
     2c4:	2f 91       	pop	r18
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <convert_analog_channel_data>:
 */
void convert_analog_channel_data( unsigned char sensor_channel_number ){
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	
	select_adc_channel( sensor_channel_number );
     2d0:	89 df       	rcall	.-238    	; 0x1e4 <select_adc_channel>
	
	start_adc();
     2d2:	cb cf       	rjmp	.-106    	; 0x26a <start_adc>
     2d4:	08 95       	ret

000002d6 <main>:
     2d6:	cf 93       	push	r28
/**
 * @brief      Main Function
 *
 * @details    First Initializes the 2nd Sharp sensor and sends its ADC converted data on LCD and UART
 */
int main(void) {
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	e2 97       	sbiw	r28, 0x32	; 50
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function except a part of while loop
	
	sharp_sensor_pin_config();			// Initialize the 2nd Sharp sensor
     2ea:	5b df       	rcall	.-330    	; 0x1a2 <sharp_sensor_pin_config>
	
	adc_init();							// Initialize the ADC
     2ec:	5d df       	rcall	.-326    	; 0x1a8 <adc_init>
	
	lcd_port_config();					// Initialize the LCD port
     2ee:	42 d0       	rcall	.+132    	; 0x374 <lcd_port_config>
     2f0:	ba d0       	rcall	.+372    	; 0x466 <lcd_init>
	lcd_init();							// Initialize the LCD
     2f2:	87 e6       	ldi	r24, 0x67	; 103
	
	uart_init(UBRR_VALUE);				// Initialize the UART
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	28 d1       	rcall	.+592    	; 0x548 <uart_init>
     2f8:	80 e0       	ldi	r24, 0x00	; 0
	
	
	// To create string for transmitting 2nd Sharp sensor raw data and corresponding voltage over the UART and LCD
	char tx_raw_adc_data_buffer[25], tx_voltage_buffer[25], lcd_print_raw_adc_data_string[25], lcd_print_voltage_string[25];
	
	convert_analog_channel_data( sharp_sensor_channel );
     2fa:	ea df       	rcall	.-44     	; 0x2d0 <convert_analog_channel_data>
     2fc:	0f 2e       	mov	r0, r31
     2fe:	fa e7       	ldi	r31, 0x7A	; 122
	
	while(1)
	{
		if ( ( ADCSRA_reg & ( 1 << ADSC_bit ) ) != 0x40 )
     300:	8f 2e       	mov	r8, r31
     302:	91 2c       	mov	r9, r1
     304:	f0 2d       	mov	r31, r0
     306:	0f 2e       	mov	r0, r31
     308:	f0 e0       	ldi	r31, 0x00	; 0
			sharp_sensor_data = adc_10bit_data;
	reset_adc_config_registers();

			// ------------------------------- //
			
			sprintf(lcd_print_raw_adc_data_string, "Raw data: %04d", sharp_sensor_data);
     30a:	af 2e       	mov	r10, r31
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	bf 2e       	mov	r11, r31
     310:	f0 2d       	mov	r31, r0
     312:	8e 01       	movw	r16, r28
     314:	06 5e       	subi	r16, 0xE6	; 230
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	0f 2e       	mov	r0, r31
     31a:	ff e0       	ldi	r31, 0x0F	; 15
			lcd_string(1, 1, lcd_print_raw_adc_data_string);
			
			sprintf(tx_raw_adc_data_buffer, "Raw data: %04d\t", sharp_sensor_data);
     31c:	cf 2e       	mov	r12, r31
     31e:	f1 e0       	ldi	r31, 0x01	; 1
     320:	df 2e       	mov	r13, r31
     322:	f0 2d       	mov	r31, r0
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	7c 01       	movw	r14, r24
     32a:	f4 01       	movw	r30, r8
     32c:	80 81       	ld	r24, Z
	
	convert_analog_channel_data( sharp_sensor_channel );
	
	while(1)
	{
		if ( ( ADCSRA_reg & ( 1 << ADSC_bit ) ) != 0x40 )
     32e:	86 fd       	sbrc	r24, 6
     330:	fc cf       	rjmp	.-8      	; 0x32a <main+0x54>
     332:	70 90 20 01 	lds	r7, 0x0120	; 0x800120 <__data_end>
		{
			// ------------------------------- //

			sharp_sensor_data = adc_10bit_data;
     336:	60 90 21 01 	lds	r6, 0x0121	; 0x800121 <__data_end+0x1>
     33a:	9d df       	rcall	.-198    	; 0x276 <reset_adc_config_registers>
	reset_adc_config_registers();
     33c:	6f 92       	push	r6

			// ------------------------------- //
			
			sprintf(lcd_print_raw_adc_data_string, "Raw data: %04d", sharp_sensor_data);
     33e:	7f 92       	push	r7
     340:	bf 92       	push	r11
     342:	af 92       	push	r10
     344:	1f 93       	push	r17
     346:	0f 93       	push	r16
     348:	e0 d5       	rcall	.+3008   	; 0xf0a <sprintf>
     34a:	a8 01       	movw	r20, r16
			lcd_string(1, 1, lcd_print_raw_adc_data_string);
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	e0 d0       	rcall	.+448    	; 0x512 <lcd_string>
     352:	6f 92       	push	r6
			
			sprintf(tx_raw_adc_data_buffer, "Raw data: %04d\t", sharp_sensor_data);
     354:	7f 92       	push	r7
     356:	df 92       	push	r13
     358:	cf 92       	push	r12
     35a:	ff 92       	push	r15
     35c:	ef 92       	push	r14
     35e:	d5 d5       	rcall	.+2986   	; 0xf0a <sprintf>
     360:	c7 01       	movw	r24, r14
			uart_tx_string(tx_raw_adc_data_buffer);
     362:	08 d1       	rcall	.+528    	; 0x574 <uart_tx_string>
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	b4 df       	rcall	.-152    	; 0x2d0 <convert_analog_channel_data>
			
			convert_analog_channel_data( sharp_sensor_channel );
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	db cf       	rjmp	.-74     	; 0x32a <main+0x54>

00000374 <lcd_port_config>:
     374:	84 b1       	in	r24, 0x04	; 4
     376:	87 60       	ori	r24, 0x07	; 7
     378:	84 b9       	out	0x04, r24	; 4
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
     37a:	8a b1       	in	r24, 0x0a	; 10
     37c:	80 6f       	ori	r24, 0xF0	; 240
     37e:	8a b9       	out	0x0a, r24	; 10
     380:	85 b1       	in	r24, 0x05	; 5
     382:	88 7f       	andi	r24, 0xF8	; 248
     384:	85 b9       	out	0x05, r24	; 5
     386:	8b b1       	in	r24, 0x0b	; 11
     388:	8f 70       	andi	r24, 0x0F	; 15
     38a:	8b b9       	out	0x0b, r24	; 11
     38c:	08 95       	ret

0000038e <lcd_set_4bit>:
     38e:	8f e9       	ldi	r24, 0x9F	; 159
     390:	9f e0       	ldi	r25, 0x0F	; 15
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <lcd_set_4bit+0x4>
     396:	00 c0       	rjmp	.+0      	; 0x398 <lcd_set_4bit+0xa>
     398:	00 00       	nop
     39a:	28 98       	cbi	0x05, 0	; 5
     39c:	2a 98       	cbi	0x05, 2	; 5
     39e:	80 e3       	ldi	r24, 0x30	; 48
     3a0:	8b b9       	out	0x0b, r24	; 11
     3a2:	29 9a       	sbi	0x05, 1	; 5
     3a4:	ef e1       	ldi	r30, 0x1F	; 31
     3a6:	fe e4       	ldi	r31, 0x4E	; 78
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_set_4bit+0x1a>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_set_4bit+0x20>
     3ae:	00 00       	nop
     3b0:	29 98       	cbi	0x05, 1	; 5
     3b2:	ef e9       	ldi	r30, 0x9F	; 159
     3b4:	ff e0       	ldi	r31, 0x0F	; 15
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_set_4bit+0x28>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <lcd_set_4bit+0x2e>
     3bc:	00 00       	nop
     3be:	28 98       	cbi	0x05, 0	; 5
     3c0:	2a 98       	cbi	0x05, 2	; 5
     3c2:	8b b9       	out	0x0b, r24	; 11
     3c4:	29 9a       	sbi	0x05, 1	; 5
     3c6:	ef e1       	ldi	r30, 0x1F	; 31
     3c8:	fe e4       	ldi	r31, 0x4E	; 78
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcd_set_4bit+0x3c>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <lcd_set_4bit+0x42>
     3d0:	00 00       	nop
     3d2:	29 98       	cbi	0x05, 1	; 5
     3d4:	ef e9       	ldi	r30, 0x9F	; 159
     3d6:	ff e0       	ldi	r31, 0x0F	; 15
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_set_4bit+0x4a>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <lcd_set_4bit+0x50>
     3de:	00 00       	nop
     3e0:	28 98       	cbi	0x05, 0	; 5
     3e2:	2a 98       	cbi	0x05, 2	; 5
     3e4:	8b b9       	out	0x0b, r24	; 11
     3e6:	29 9a       	sbi	0x05, 1	; 5
     3e8:	8f e1       	ldi	r24, 0x1F	; 31
     3ea:	9e e4       	ldi	r25, 0x4E	; 78
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_set_4bit+0x5e>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_set_4bit+0x64>
     3f2:	00 00       	nop
     3f4:	29 98       	cbi	0x05, 1	; 5
     3f6:	ef e9       	ldi	r30, 0x9F	; 159
     3f8:	ff e0       	ldi	r31, 0x0F	; 15
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_set_4bit+0x6c>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 00       	nop
     402:	28 98       	cbi	0x05, 0	; 5
     404:	2a 98       	cbi	0x05, 2	; 5
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	8b b9       	out	0x0b, r24	; 11
     40a:	29 9a       	sbi	0x05, 1	; 5
     40c:	8f e1       	ldi	r24, 0x1F	; 31
     40e:	9e e4       	ldi	r25, 0x4E	; 78
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     416:	00 00       	nop
     418:	29 98       	cbi	0x05, 1	; 5
     41a:	08 95       	ret

0000041c <lcd_wr_command>:
     41c:	9b b1       	in	r25, 0x0b	; 11
     41e:	9f 70       	andi	r25, 0x0F	; 15
     420:	9b b9       	out	0x0b, r25	; 11
     422:	9b b1       	in	r25, 0x0b	; 11
     424:	28 2f       	mov	r18, r24
     426:	20 7f       	andi	r18, 0xF0	; 240
     428:	92 2b       	or	r25, r18
     42a:	9b b9       	out	0x0b, r25	; 11
     42c:	28 98       	cbi	0x05, 0	; 5
     42e:	2a 98       	cbi	0x05, 2	; 5
     430:	29 9a       	sbi	0x05, 1	; 5
     432:	ef e1       	ldi	r30, 0x1F	; 31
     434:	fe e4       	ldi	r31, 0x4E	; 78
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <lcd_wr_command+0x1a>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <lcd_wr_command+0x20>
     43c:	00 00       	nop
     43e:	29 98       	cbi	0x05, 1	; 5
     440:	9b b1       	in	r25, 0x0b	; 11
     442:	9f 70       	andi	r25, 0x0F	; 15
     444:	9b b9       	out	0x0b, r25	; 11
     446:	9b b1       	in	r25, 0x0b	; 11
     448:	82 95       	swap	r24
     44a:	80 7f       	andi	r24, 0xF0	; 240
     44c:	89 2b       	or	r24, r25
     44e:	8b b9       	out	0x0b, r24	; 11
     450:	28 98       	cbi	0x05, 0	; 5
     452:	2a 98       	cbi	0x05, 2	; 5
     454:	29 9a       	sbi	0x05, 1	; 5
     456:	8f e1       	ldi	r24, 0x1F	; 31
     458:	9e e4       	ldi	r25, 0x4E	; 78
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_wr_command+0x3e>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <lcd_wr_command+0x44>
     460:	00 00       	nop
     462:	29 98       	cbi	0x05, 1	; 5
     464:	08 95       	ret

00000466 <lcd_init>:
     466:	93 df       	rcall	.-218    	; 0x38e <lcd_set_4bit>
     468:	8f e9       	ldi	r24, 0x9F	; 159
     46a:	9f e0       	ldi	r25, 0x0F	; 15
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_init+0x6>
     470:	00 c0       	rjmp	.+0      	; 0x472 <lcd_init+0xc>
     472:	00 00       	nop
     474:	88 e2       	ldi	r24, 0x28	; 40
     476:	d2 df       	rcall	.-92     	; 0x41c <lcd_wr_command>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	d0 df       	rcall	.-96     	; 0x41c <lcd_wr_command>
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	ce df       	rcall	.-100    	; 0x41c <lcd_wr_command>
     480:	8e e0       	ldi	r24, 0x0E	; 14
     482:	cc df       	rcall	.-104    	; 0x41c <lcd_wr_command>
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	ca cf       	rjmp	.-108    	; 0x41c <lcd_wr_command>
     488:	08 95       	ret

0000048a <lcd_cursor>:
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	69 f0       	breq	.+26     	; 0x4a8 <lcd_cursor+0x1e>
     48e:	18 f4       	brcc	.+6      	; 0x496 <lcd_cursor+0xc>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	31 f0       	breq	.+12     	; 0x4a0 <lcd_cursor+0x16>
     494:	08 95       	ret
     496:	83 30       	cpi	r24, 0x03	; 3
     498:	59 f0       	breq	.+22     	; 0x4b0 <lcd_cursor+0x26>
     49a:	84 30       	cpi	r24, 0x04	; 4
     49c:	69 f0       	breq	.+26     	; 0x4b8 <lcd_cursor+0x2e>
     49e:	08 95       	ret
     4a0:	8f e7       	ldi	r24, 0x7F	; 127
     4a2:	86 0f       	add	r24, r22
     4a4:	bb cf       	rjmp	.-138    	; 0x41c <lcd_wr_command>
     4a6:	08 95       	ret
     4a8:	8f eb       	ldi	r24, 0xBF	; 191
     4aa:	86 0f       	add	r24, r22
     4ac:	b7 cf       	rjmp	.-146    	; 0x41c <lcd_wr_command>
     4ae:	08 95       	ret
     4b0:	83 e9       	ldi	r24, 0x93	; 147
     4b2:	86 0f       	add	r24, r22
     4b4:	b3 cf       	rjmp	.-154    	; 0x41c <lcd_wr_command>
     4b6:	08 95       	ret
     4b8:	83 ed       	ldi	r24, 0xD3	; 211
     4ba:	86 0f       	add	r24, r22
     4bc:	af cf       	rjmp	.-162    	; 0x41c <lcd_wr_command>
     4be:	08 95       	ret

000004c0 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
     4c0:	cf 93       	push	r28
     4c2:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
     4c4:	e2 df       	rcall	.-60     	; 0x48a <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
     4c6:	8b b1       	in	r24, 0x0b	; 11
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	9c 2f       	mov	r25, r28
     4d0:	90 7f       	andi	r25, 0xF0	; 240
     4d2:	89 2b       	or	r24, r25
     4d4:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
     4d6:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
     4d8:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
     4da:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	8f e1       	ldi	r24, 0x1F	; 31
     4de:	9e e4       	ldi	r25, 0x4E	; 78
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <lcd_wr_char+0x20>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <lcd_wr_char+0x26>
     4e6:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
     4e8:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
     4ea:	8b b1       	in	r24, 0x0b	; 11
     4ec:	8f 70       	andi	r24, 0x0F	; 15
     4ee:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
     4f0:	8b b1       	in	r24, 0x0b	; 11
     4f2:	c2 95       	swap	r28
     4f4:	c0 7f       	andi	r28, 0xF0	; 240
     4f6:	c8 2b       	or	r28, r24
     4f8:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
     4fa:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
     4fc:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
     4fe:	29 9a       	sbi	0x05, 1	; 5
     500:	8f e1       	ldi	r24, 0x1F	; 31
     502:	9e e4       	ldi	r25, 0x4E	; 78
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <lcd_wr_char+0x44>
     508:	00 c0       	rjmp	.+0      	; 0x50a <lcd_wr_char+0x4a>
     50a:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
     50c:	29 98       	cbi	0x05, 1	; 5
}
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	d8 2f       	mov	r29, r24
     51c:	c6 2f       	mov	r28, r22
     51e:	fa 01       	movw	r30, r20
	while(*str != '\0')
     520:	40 81       	ld	r20, Z
     522:	44 23       	and	r20, r20
     524:	61 f0       	breq	.+24     	; 0x53e <lcd_string+0x2c>
     526:	8f 01       	movw	r16, r30
     528:	0f 5f       	subi	r16, 0xFF	; 255
     52a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
     52c:	6c 2f       	mov	r22, r28
     52e:	8d 2f       	mov	r24, r29
     530:	c7 df       	rcall	.-114    	; 0x4c0 <lcd_wr_char>
		str++;
		column+=1;
     532:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
     534:	f8 01       	movw	r30, r16
     536:	41 91       	ld	r20, Z+
     538:	8f 01       	movw	r16, r30
     53a:	41 11       	cpse	r20, r1
     53c:	f7 cf       	rjmp	.-18     	; 0x52c <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <uart_init>:
 * Example Call: uart_tx();
 */
void uart_tx(char data)
{
	//while( ( UCSRA_reg & ( 1 << UDRE_bit ) ) == 0x00 );				// waiting to transmit	
	UDR_reg	= data;
     548:	e1 ec       	ldi	r30, 0xC1	; 193
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	10 82       	st	Z, r1
     54e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     552:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     556:	a2 ec       	ldi	r26, 0xC2	; 194
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	8c 91       	ld	r24, X
     55c:	8f 73       	andi	r24, 0x3F	; 63
     55e:	8c 93       	st	X, r24
     560:	8c 91       	ld	r24, X
     562:	86 60       	ori	r24, 0x06	; 6
     564:	8c 93       	st	X, r24
     566:	80 81       	ld	r24, Z
     568:	88 61       	ori	r24, 0x18	; 24
     56a:	80 83       	st	Z, r24
     56c:	80 81       	ld	r24, Z
     56e:	8b 7f       	andi	r24, 0xFB	; 251
     570:	80 83       	st	Z, r24
     572:	08 95       	ret

00000574 <uart_tx_string>:
 * Output: None
 * Logic: This function sends a string over the UART
 * Example Call: uart_tx_string();
 */
void uart_tx_string(char *data)
{
     574:	fc 01       	movw	r30, r24
	while(*data != '\0')
     576:	90 81       	ld	r25, Z
     578:	99 23       	and	r25, r25
     57a:	39 f0       	breq	.+14     	; 0x58a <uart_tx_string+0x16>
     57c:	31 96       	adiw	r30, 0x01	; 1
 * Example Call: uart_tx();
 */
void uart_tx(char data)
{
	//while( ( UCSRA_reg & ( 1 << UDRE_bit ) ) == 0x00 );				// waiting to transmit	
	UDR_reg	= data;
     57e:	a6 ec       	ldi	r26, 0xC6	; 198
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	9c 93       	st	X, r25
 * Logic: This function sends a string over the UART
 * Example Call: uart_tx_string();
 */
void uart_tx_string(char *data)
{
	while(*data != '\0')
     584:	91 91       	ld	r25, Z+
     586:	91 11       	cpse	r25, r1
     588:	fc cf       	rjmp	.-8      	; 0x582 <uart_tx_string+0xe>
     58a:	08 95       	ret

0000058c <vfprintf>:
     58c:	a0 e1       	ldi	r26, 0x10	; 16
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	eb ec       	ldi	r30, 0xCB	; 203
     592:	f2 e0       	ldi	r31, 0x02	; 2
     594:	59 c3       	rjmp	.+1714   	; 0xc48 <__prologue_saves__>
     596:	7c 01       	movw	r14, r24
     598:	1b 01       	movw	r2, r22
     59a:	6a 01       	movw	r12, r20
     59c:	fc 01       	movw	r30, r24
     59e:	17 82       	std	Z+7, r1	; 0x07
     5a0:	16 82       	std	Z+6, r1	; 0x06
     5a2:	83 81       	ldd	r24, Z+3	; 0x03
     5a4:	81 ff       	sbrs	r24, 1
     5a6:	2a c3       	rjmp	.+1620   	; 0xbfc <__stack+0x2fd>
     5a8:	9e 01       	movw	r18, r28
     5aa:	2f 5f       	subi	r18, 0xFF	; 255
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	39 01       	movw	r6, r18
     5b0:	f7 01       	movw	r30, r14
     5b2:	93 81       	ldd	r25, Z+3	; 0x03
     5b4:	f1 01       	movw	r30, r2
     5b6:	93 fd       	sbrc	r25, 3
     5b8:	85 91       	lpm	r24, Z+
     5ba:	93 ff       	sbrs	r25, 3
     5bc:	81 91       	ld	r24, Z+
     5be:	1f 01       	movw	r2, r30
     5c0:	88 23       	and	r24, r24
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <vfprintf+0x3a>
     5c4:	17 c3       	rjmp	.+1582   	; 0xbf4 <__stack+0x2f5>
     5c6:	85 32       	cpi	r24, 0x25	; 37
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <vfprintf+0x4c>
     5ca:	93 fd       	sbrc	r25, 3
     5cc:	85 91       	lpm	r24, Z+
     5ce:	93 ff       	sbrs	r25, 3
     5d0:	81 91       	ld	r24, Z+
     5d2:	1f 01       	movw	r2, r30
     5d4:	85 32       	cpi	r24, 0x25	; 37
     5d6:	31 f4       	brne	.+12     	; 0x5e4 <vfprintf+0x58>
     5d8:	b7 01       	movw	r22, r14
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	5a d4       	rcall	.+2228   	; 0xe92 <fputc>
     5de:	56 01       	movw	r10, r12
     5e0:	65 01       	movw	r12, r10
     5e2:	e6 cf       	rjmp	.-52     	; 0x5b0 <vfprintf+0x24>
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	51 2c       	mov	r5, r1
     5e8:	91 2c       	mov	r9, r1
     5ea:	ff e1       	ldi	r31, 0x1F	; 31
     5ec:	f9 15       	cp	r31, r9
     5ee:	d8 f0       	brcs	.+54     	; 0x626 <vfprintf+0x9a>
     5f0:	8b 32       	cpi	r24, 0x2B	; 43
     5f2:	79 f0       	breq	.+30     	; 0x612 <vfprintf+0x86>
     5f4:	38 f4       	brcc	.+14     	; 0x604 <vfprintf+0x78>
     5f6:	80 32       	cpi	r24, 0x20	; 32
     5f8:	79 f0       	breq	.+30     	; 0x618 <vfprintf+0x8c>
     5fa:	83 32       	cpi	r24, 0x23	; 35
     5fc:	a1 f4       	brne	.+40     	; 0x626 <vfprintf+0x9a>
     5fe:	f9 2d       	mov	r31, r9
     600:	f0 61       	ori	r31, 0x10	; 16
     602:	2e c0       	rjmp	.+92     	; 0x660 <vfprintf+0xd4>
     604:	8d 32       	cpi	r24, 0x2D	; 45
     606:	61 f0       	breq	.+24     	; 0x620 <vfprintf+0x94>
     608:	80 33       	cpi	r24, 0x30	; 48
     60a:	69 f4       	brne	.+26     	; 0x626 <vfprintf+0x9a>
     60c:	29 2d       	mov	r18, r9
     60e:	21 60       	ori	r18, 0x01	; 1
     610:	2d c0       	rjmp	.+90     	; 0x66c <vfprintf+0xe0>
     612:	39 2d       	mov	r19, r9
     614:	32 60       	ori	r19, 0x02	; 2
     616:	93 2e       	mov	r9, r19
     618:	89 2d       	mov	r24, r9
     61a:	84 60       	ori	r24, 0x04	; 4
     61c:	98 2e       	mov	r9, r24
     61e:	2a c0       	rjmp	.+84     	; 0x674 <vfprintf+0xe8>
     620:	e9 2d       	mov	r30, r9
     622:	e8 60       	ori	r30, 0x08	; 8
     624:	15 c0       	rjmp	.+42     	; 0x650 <vfprintf+0xc4>
     626:	97 fc       	sbrc	r9, 7
     628:	2d c0       	rjmp	.+90     	; 0x684 <vfprintf+0xf8>
     62a:	20 ed       	ldi	r18, 0xD0	; 208
     62c:	28 0f       	add	r18, r24
     62e:	2a 30       	cpi	r18, 0x0A	; 10
     630:	88 f4       	brcc	.+34     	; 0x654 <vfprintf+0xc8>
     632:	96 fe       	sbrs	r9, 6
     634:	06 c0       	rjmp	.+12     	; 0x642 <vfprintf+0xb6>
     636:	3a e0       	ldi	r19, 0x0A	; 10
     638:	13 9f       	mul	r17, r19
     63a:	20 0d       	add	r18, r0
     63c:	11 24       	eor	r1, r1
     63e:	12 2f       	mov	r17, r18
     640:	19 c0       	rjmp	.+50     	; 0x674 <vfprintf+0xe8>
     642:	8a e0       	ldi	r24, 0x0A	; 10
     644:	58 9e       	mul	r5, r24
     646:	20 0d       	add	r18, r0
     648:	11 24       	eor	r1, r1
     64a:	52 2e       	mov	r5, r18
     64c:	e9 2d       	mov	r30, r9
     64e:	e0 62       	ori	r30, 0x20	; 32
     650:	9e 2e       	mov	r9, r30
     652:	10 c0       	rjmp	.+32     	; 0x674 <vfprintf+0xe8>
     654:	8e 32       	cpi	r24, 0x2E	; 46
     656:	31 f4       	brne	.+12     	; 0x664 <vfprintf+0xd8>
     658:	96 fc       	sbrc	r9, 6
     65a:	cc c2       	rjmp	.+1432   	; 0xbf4 <__stack+0x2f5>
     65c:	f9 2d       	mov	r31, r9
     65e:	f0 64       	ori	r31, 0x40	; 64
     660:	9f 2e       	mov	r9, r31
     662:	08 c0       	rjmp	.+16     	; 0x674 <vfprintf+0xe8>
     664:	8c 36       	cpi	r24, 0x6C	; 108
     666:	21 f4       	brne	.+8      	; 0x670 <vfprintf+0xe4>
     668:	29 2d       	mov	r18, r9
     66a:	20 68       	ori	r18, 0x80	; 128
     66c:	92 2e       	mov	r9, r18
     66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0xe8>
     670:	88 36       	cpi	r24, 0x68	; 104
     672:	41 f4       	brne	.+16     	; 0x684 <vfprintf+0xf8>
     674:	f1 01       	movw	r30, r2
     676:	93 fd       	sbrc	r25, 3
     678:	85 91       	lpm	r24, Z+
     67a:	93 ff       	sbrs	r25, 3
     67c:	81 91       	ld	r24, Z+
     67e:	1f 01       	movw	r2, r30
     680:	81 11       	cpse	r24, r1
     682:	b3 cf       	rjmp	.-154    	; 0x5ea <vfprintf+0x5e>
     684:	9b eb       	ldi	r25, 0xBB	; 187
     686:	98 0f       	add	r25, r24
     688:	93 30       	cpi	r25, 0x03	; 3
     68a:	20 f4       	brcc	.+8      	; 0x694 <vfprintf+0x108>
     68c:	99 2d       	mov	r25, r9
     68e:	90 61       	ori	r25, 0x10	; 16
     690:	80 5e       	subi	r24, 0xE0	; 224
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <vfprintf+0x116>
     694:	9b e9       	ldi	r25, 0x9B	; 155
     696:	98 0f       	add	r25, r24
     698:	93 30       	cpi	r25, 0x03	; 3
     69a:	08 f0       	brcs	.+2      	; 0x69e <vfprintf+0x112>
     69c:	59 c1       	rjmp	.+690    	; 0x950 <__stack+0x51>
     69e:	99 2d       	mov	r25, r9
     6a0:	9f 7e       	andi	r25, 0xEF	; 239
     6a2:	96 ff       	sbrs	r25, 6
     6a4:	16 e0       	ldi	r17, 0x06	; 6
     6a6:	9f 73       	andi	r25, 0x3F	; 63
     6a8:	99 2e       	mov	r9, r25
     6aa:	85 36       	cpi	r24, 0x65	; 101
     6ac:	19 f4       	brne	.+6      	; 0x6b4 <vfprintf+0x128>
     6ae:	90 64       	ori	r25, 0x40	; 64
     6b0:	99 2e       	mov	r9, r25
     6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <vfprintf+0x138>
     6b4:	86 36       	cpi	r24, 0x66	; 102
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <vfprintf+0x134>
     6b8:	39 2f       	mov	r19, r25
     6ba:	30 68       	ori	r19, 0x80	; 128
     6bc:	93 2e       	mov	r9, r19
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <vfprintf+0x138>
     6c0:	11 11       	cpse	r17, r1
     6c2:	11 50       	subi	r17, 0x01	; 1
     6c4:	97 fe       	sbrs	r9, 7
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <vfprintf+0x14a>
     6c8:	1c 33       	cpi	r17, 0x3C	; 60
     6ca:	50 f4       	brcc	.+20     	; 0x6e0 <vfprintf+0x154>
     6cc:	44 24       	eor	r4, r4
     6ce:	43 94       	inc	r4
     6d0:	41 0e       	add	r4, r17
     6d2:	27 e0       	ldi	r18, 0x07	; 7
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <vfprintf+0x160>
     6d6:	18 30       	cpi	r17, 0x08	; 8
     6d8:	38 f0       	brcs	.+14     	; 0x6e8 <vfprintf+0x15c>
     6da:	27 e0       	ldi	r18, 0x07	; 7
     6dc:	17 e0       	ldi	r17, 0x07	; 7
     6de:	05 c0       	rjmp	.+10     	; 0x6ea <vfprintf+0x15e>
     6e0:	27 e0       	ldi	r18, 0x07	; 7
     6e2:	9c e3       	ldi	r25, 0x3C	; 60
     6e4:	49 2e       	mov	r4, r25
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <vfprintf+0x160>
     6e8:	21 2f       	mov	r18, r17
     6ea:	41 2c       	mov	r4, r1
     6ec:	56 01       	movw	r10, r12
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	a8 0e       	add	r10, r24
     6f2:	b1 1c       	adc	r11, r1
     6f4:	f6 01       	movw	r30, r12
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	04 2d       	mov	r16, r4
     700:	a3 01       	movw	r20, r6
     702:	d9 d2       	rcall	.+1458   	; 0xcb6 <__ftoa_engine>
     704:	6c 01       	movw	r12, r24
     706:	f9 81       	ldd	r31, Y+1	; 0x01
     708:	fc 87       	std	Y+12, r31	; 0x0c
     70a:	f0 ff       	sbrs	r31, 0
     70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0x186>
     70e:	f3 ff       	sbrs	r31, 3
     710:	06 c0       	rjmp	.+12     	; 0x71e <vfprintf+0x192>
     712:	91 fc       	sbrc	r9, 1
     714:	06 c0       	rjmp	.+12     	; 0x722 <vfprintf+0x196>
     716:	92 fe       	sbrs	r9, 2
     718:	06 c0       	rjmp	.+12     	; 0x726 <vfprintf+0x19a>
     71a:	00 e2       	ldi	r16, 0x20	; 32
     71c:	05 c0       	rjmp	.+10     	; 0x728 <vfprintf+0x19c>
     71e:	0d e2       	ldi	r16, 0x2D	; 45
     720:	03 c0       	rjmp	.+6      	; 0x728 <vfprintf+0x19c>
     722:	0b e2       	ldi	r16, 0x2B	; 43
     724:	01 c0       	rjmp	.+2      	; 0x728 <vfprintf+0x19c>
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	8c 85       	ldd	r24, Y+12	; 0x0c
     72a:	8c 70       	andi	r24, 0x0C	; 12
     72c:	19 f0       	breq	.+6      	; 0x734 <vfprintf+0x1a8>
     72e:	01 11       	cpse	r16, r1
     730:	43 c2       	rjmp	.+1158   	; 0xbb8 <__stack+0x2b9>
     732:	80 c2       	rjmp	.+1280   	; 0xc34 <__stack+0x335>
     734:	97 fe       	sbrs	r9, 7
     736:	10 c0       	rjmp	.+32     	; 0x758 <vfprintf+0x1cc>
     738:	4c 0c       	add	r4, r12
     73a:	fc 85       	ldd	r31, Y+12	; 0x0c
     73c:	f4 ff       	sbrs	r31, 4
     73e:	04 c0       	rjmp	.+8      	; 0x748 <vfprintf+0x1bc>
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	81 33       	cpi	r24, 0x31	; 49
     744:	09 f4       	brne	.+2      	; 0x748 <vfprintf+0x1bc>
     746:	4a 94       	dec	r4
     748:	14 14       	cp	r1, r4
     74a:	74 f5       	brge	.+92     	; 0x7a8 <vfprintf+0x21c>
     74c:	28 e0       	ldi	r18, 0x08	; 8
     74e:	24 15       	cp	r18, r4
     750:	78 f5       	brcc	.+94     	; 0x7b0 <vfprintf+0x224>
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	48 2e       	mov	r4, r24
     756:	2c c0       	rjmp	.+88     	; 0x7b0 <vfprintf+0x224>
     758:	96 fc       	sbrc	r9, 6
     75a:	2a c0       	rjmp	.+84     	; 0x7b0 <vfprintf+0x224>
     75c:	81 2f       	mov	r24, r17
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	8c 15       	cp	r24, r12
     762:	9d 05       	cpc	r25, r13
     764:	9c f0       	brlt	.+38     	; 0x78c <vfprintf+0x200>
     766:	3c ef       	ldi	r19, 0xFC	; 252
     768:	c3 16       	cp	r12, r19
     76a:	3f ef       	ldi	r19, 0xFF	; 255
     76c:	d3 06       	cpc	r13, r19
     76e:	74 f0       	brlt	.+28     	; 0x78c <vfprintf+0x200>
     770:	89 2d       	mov	r24, r9
     772:	80 68       	ori	r24, 0x80	; 128
     774:	98 2e       	mov	r9, r24
     776:	0a c0       	rjmp	.+20     	; 0x78c <vfprintf+0x200>
     778:	e2 e0       	ldi	r30, 0x02	; 2
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ec 0f       	add	r30, r28
     77e:	fd 1f       	adc	r31, r29
     780:	e1 0f       	add	r30, r17
     782:	f1 1d       	adc	r31, r1
     784:	80 81       	ld	r24, Z
     786:	80 33       	cpi	r24, 0x30	; 48
     788:	19 f4       	brne	.+6      	; 0x790 <vfprintf+0x204>
     78a:	11 50       	subi	r17, 0x01	; 1
     78c:	11 11       	cpse	r17, r1
     78e:	f4 cf       	rjmp	.-24     	; 0x778 <vfprintf+0x1ec>
     790:	97 fe       	sbrs	r9, 7
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <vfprintf+0x224>
     794:	44 24       	eor	r4, r4
     796:	43 94       	inc	r4
     798:	41 0e       	add	r4, r17
     79a:	81 2f       	mov	r24, r17
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	c8 16       	cp	r12, r24
     7a0:	d9 06       	cpc	r13, r25
     7a2:	2c f4       	brge	.+10     	; 0x7ae <vfprintf+0x222>
     7a4:	1c 19       	sub	r17, r12
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <vfprintf+0x224>
     7a8:	44 24       	eor	r4, r4
     7aa:	43 94       	inc	r4
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <vfprintf+0x224>
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	97 fe       	sbrs	r9, 7
     7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <vfprintf+0x234>
     7b4:	1c 14       	cp	r1, r12
     7b6:	1d 04       	cpc	r1, r13
     7b8:	34 f4       	brge	.+12     	; 0x7c6 <vfprintf+0x23a>
     7ba:	c6 01       	movw	r24, r12
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0x23e>
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x23e>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	01 11       	cpse	r16, r1
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	11 23       	and	r17, r17
     7d0:	31 f0       	breq	.+12     	; 0x7de <vfprintf+0x252>
     7d2:	21 2f       	mov	r18, r17
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	2f 5f       	subi	r18, 0xFF	; 255
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	25 2d       	mov	r18, r5
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	82 17       	cp	r24, r18
     7e4:	93 07       	cpc	r25, r19
     7e6:	14 f4       	brge	.+4      	; 0x7ec <vfprintf+0x260>
     7e8:	58 1a       	sub	r5, r24
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <vfprintf+0x262>
     7ec:	51 2c       	mov	r5, r1
     7ee:	89 2d       	mov	r24, r9
     7f0:	89 70       	andi	r24, 0x09	; 9
     7f2:	41 f4       	brne	.+16     	; 0x804 <vfprintf+0x278>
     7f4:	55 20       	and	r5, r5
     7f6:	31 f0       	breq	.+12     	; 0x804 <vfprintf+0x278>
     7f8:	b7 01       	movw	r22, r14
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	49 d3       	rcall	.+1682   	; 0xe92 <fputc>
     800:	5a 94       	dec	r5
     802:	f8 cf       	rjmp	.-16     	; 0x7f4 <vfprintf+0x268>
     804:	00 23       	and	r16, r16
     806:	21 f0       	breq	.+8      	; 0x810 <vfprintf+0x284>
     808:	b7 01       	movw	r22, r14
     80a:	80 2f       	mov	r24, r16
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	41 d3       	rcall	.+1666   	; 0xe92 <fputc>
     810:	93 fc       	sbrc	r9, 3
     812:	08 c0       	rjmp	.+16     	; 0x824 <vfprintf+0x298>
     814:	55 20       	and	r5, r5
     816:	31 f0       	breq	.+12     	; 0x824 <vfprintf+0x298>
     818:	b7 01       	movw	r22, r14
     81a:	80 e3       	ldi	r24, 0x30	; 48
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	39 d3       	rcall	.+1650   	; 0xe92 <fputc>
     820:	5a 94       	dec	r5
     822:	f8 cf       	rjmp	.-16     	; 0x814 <vfprintf+0x288>
     824:	97 fe       	sbrs	r9, 7
     826:	4a c0       	rjmp	.+148    	; 0x8bc <vfprintf+0x330>
     828:	46 01       	movw	r8, r12
     82a:	d7 fe       	sbrs	r13, 7
     82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x2a6>
     82e:	81 2c       	mov	r8, r1
     830:	91 2c       	mov	r9, r1
     832:	c6 01       	movw	r24, r12
     834:	88 19       	sub	r24, r8
     836:	99 09       	sbc	r25, r9
     838:	f3 01       	movw	r30, r6
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	fe 87       	std	Y+14, r31	; 0x0e
     840:	ed 87       	std	Y+13, r30	; 0x0d
     842:	96 01       	movw	r18, r12
     844:	24 19       	sub	r18, r4
     846:	31 09       	sbc	r19, r1
     848:	38 8b       	std	Y+16, r19	; 0x10
     84a:	2f 87       	std	Y+15, r18	; 0x0f
     84c:	01 2f       	mov	r16, r17
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	11 95       	neg	r17
     852:	01 95       	neg	r16
     854:	11 09       	sbc	r17, r1
     856:	3f ef       	ldi	r19, 0xFF	; 255
     858:	83 16       	cp	r8, r19
     85a:	93 06       	cpc	r9, r19
     85c:	21 f4       	brne	.+8      	; 0x866 <vfprintf+0x2da>
     85e:	b7 01       	movw	r22, r14
     860:	8e e2       	ldi	r24, 0x2E	; 46
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	16 d3       	rcall	.+1580   	; 0xe92 <fputc>
     866:	c8 14       	cp	r12, r8
     868:	d9 04       	cpc	r13, r9
     86a:	4c f0       	brlt	.+18     	; 0x87e <vfprintf+0x2f2>
     86c:	8f 85       	ldd	r24, Y+15	; 0x0f
     86e:	98 89       	ldd	r25, Y+16	; 0x10
     870:	88 15       	cp	r24, r8
     872:	99 05       	cpc	r25, r9
     874:	24 f4       	brge	.+8      	; 0x87e <vfprintf+0x2f2>
     876:	ed 85       	ldd	r30, Y+13	; 0x0d
     878:	fe 85       	ldd	r31, Y+14	; 0x0e
     87a:	81 81       	ldd	r24, Z+1	; 0x01
     87c:	01 c0       	rjmp	.+2      	; 0x880 <vfprintf+0x2f4>
     87e:	80 e3       	ldi	r24, 0x30	; 48
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	8f 1a       	sub	r8, r31
     884:	91 08       	sbc	r9, r1
     886:	2d 85       	ldd	r18, Y+13	; 0x0d
     888:	3e 85       	ldd	r19, Y+14	; 0x0e
     88a:	2f 5f       	subi	r18, 0xFF	; 255
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
     88e:	3e 87       	std	Y+14, r19	; 0x0e
     890:	2d 87       	std	Y+13, r18	; 0x0d
     892:	80 16       	cp	r8, r16
     894:	91 06       	cpc	r9, r17
     896:	24 f0       	brlt	.+8      	; 0x8a0 <vfprintf+0x314>
     898:	b7 01       	movw	r22, r14
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	fa d2       	rcall	.+1524   	; 0xe92 <fputc>
     89e:	db cf       	rjmp	.-74     	; 0x856 <vfprintf+0x2ca>
     8a0:	c8 14       	cp	r12, r8
     8a2:	d9 04       	cpc	r13, r9
     8a4:	41 f4       	brne	.+16     	; 0x8b6 <vfprintf+0x32a>
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	96 33       	cpi	r25, 0x36	; 54
     8aa:	20 f4       	brcc	.+8      	; 0x8b4 <vfprintf+0x328>
     8ac:	95 33       	cpi	r25, 0x35	; 53
     8ae:	19 f4       	brne	.+6      	; 0x8b6 <vfprintf+0x32a>
     8b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     8b2:	34 ff       	sbrs	r19, 4
     8b4:	81 e3       	ldi	r24, 0x31	; 49
     8b6:	b7 01       	movw	r22, r14
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	48 c0       	rjmp	.+144    	; 0x94c <__stack+0x4d>
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	81 33       	cpi	r24, 0x31	; 49
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <vfprintf+0x33c>
     8c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c4:	9f 7e       	andi	r25, 0xEF	; 239
     8c6:	9c 87       	std	Y+12, r25	; 0x0c
     8c8:	b7 01       	movw	r22, r14
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	e2 d2       	rcall	.+1476   	; 0xe92 <fputc>
     8ce:	11 11       	cpse	r17, r1
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <vfprintf+0x350>
     8d2:	94 fc       	sbrc	r9, 4
     8d4:	16 c0       	rjmp	.+44     	; 0x902 <__stack+0x3>
     8d6:	85 e6       	ldi	r24, 0x65	; 101
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	15 c0       	rjmp	.+42     	; 0x906 <__stack+0x7>
     8dc:	b7 01       	movw	r22, r14
     8de:	8e e2       	ldi	r24, 0x2E	; 46
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	d7 d2       	rcall	.+1454   	; 0xe92 <fputc>
     8e4:	1e 5f       	subi	r17, 0xFE	; 254
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	01 e0       	ldi	r16, 0x01	; 1
     8ea:	08 0f       	add	r16, r24
     8ec:	f3 01       	movw	r30, r6
     8ee:	e8 0f       	add	r30, r24
     8f0:	f1 1d       	adc	r31, r1
     8f2:	80 81       	ld	r24, Z
     8f4:	b7 01       	movw	r22, r14
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	cc d2       	rcall	.+1432   	; 0xe92 <fputc>
     8fa:	80 2f       	mov	r24, r16
     8fc:	01 13       	cpse	r16, r17
     8fe:	f4 cf       	rjmp	.-24     	; 0x8e8 <vfprintf+0x35c>
     900:	e8 cf       	rjmp	.-48     	; 0x8d2 <vfprintf+0x346>
     902:	85 e4       	ldi	r24, 0x45	; 69
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	b7 01       	movw	r22, r14
     908:	c4 d2       	rcall	.+1416   	; 0xe92 <fputc>
     90a:	d7 fc       	sbrc	r13, 7
     90c:	06 c0       	rjmp	.+12     	; 0x91a <__stack+0x1b>
     90e:	c1 14       	cp	r12, r1
     910:	d1 04       	cpc	r13, r1
     912:	41 f4       	brne	.+16     	; 0x924 <__stack+0x25>
     914:	ec 85       	ldd	r30, Y+12	; 0x0c
     916:	e4 ff       	sbrs	r30, 4
     918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
     91a:	d1 94       	neg	r13
     91c:	c1 94       	neg	r12
     91e:	d1 08       	sbc	r13, r1
     920:	8d e2       	ldi	r24, 0x2D	; 45
     922:	01 c0       	rjmp	.+2      	; 0x926 <__stack+0x27>
     924:	8b e2       	ldi	r24, 0x2B	; 43
     926:	b7 01       	movw	r22, r14
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	b3 d2       	rcall	.+1382   	; 0xe92 <fputc>
     92c:	80 e3       	ldi	r24, 0x30	; 48
     92e:	2a e0       	ldi	r18, 0x0A	; 10
     930:	c2 16       	cp	r12, r18
     932:	d1 04       	cpc	r13, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__stack+0x41>
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	fa e0       	ldi	r31, 0x0A	; 10
     93a:	cf 1a       	sub	r12, r31
     93c:	d1 08       	sbc	r13, r1
     93e:	f7 cf       	rjmp	.-18     	; 0x92e <__stack+0x2f>
     940:	b7 01       	movw	r22, r14
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	a6 d2       	rcall	.+1356   	; 0xe92 <fputc>
     946:	b7 01       	movw	r22, r14
     948:	c6 01       	movw	r24, r12
     94a:	c0 96       	adiw	r24, 0x30	; 48
     94c:	a2 d2       	rcall	.+1348   	; 0xe92 <fputc>
     94e:	49 c1       	rjmp	.+658    	; 0xbe2 <__stack+0x2e3>
     950:	83 36       	cpi	r24, 0x63	; 99
     952:	31 f0       	breq	.+12     	; 0x960 <__stack+0x61>
     954:	83 37       	cpi	r24, 0x73	; 115
     956:	79 f0       	breq	.+30     	; 0x976 <__stack+0x77>
     958:	83 35       	cpi	r24, 0x53	; 83
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
     95c:	52 c0       	rjmp	.+164    	; 0xa02 <__stack+0x103>
     95e:	1f c0       	rjmp	.+62     	; 0x99e <__stack+0x9f>
     960:	56 01       	movw	r10, r12
     962:	32 e0       	ldi	r19, 0x02	; 2
     964:	a3 0e       	add	r10, r19
     966:	b1 1c       	adc	r11, r1
     968:	f6 01       	movw	r30, r12
     96a:	80 81       	ld	r24, Z
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	01 e0       	ldi	r16, 0x01	; 1
     970:	10 e0       	ldi	r17, 0x00	; 0
     972:	63 01       	movw	r12, r6
     974:	11 c0       	rjmp	.+34     	; 0x998 <__stack+0x99>
     976:	56 01       	movw	r10, r12
     978:	f2 e0       	ldi	r31, 0x02	; 2
     97a:	af 0e       	add	r10, r31
     97c:	b1 1c       	adc	r11, r1
     97e:	f6 01       	movw	r30, r12
     980:	c0 80       	ld	r12, Z
     982:	d1 80       	ldd	r13, Z+1	; 0x01
     984:	96 fe       	sbrs	r9, 6
     986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
     988:	61 2f       	mov	r22, r17
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
     98e:	6f ef       	ldi	r22, 0xFF	; 255
     990:	7f ef       	ldi	r23, 0xFF	; 255
     992:	c6 01       	movw	r24, r12
     994:	73 d2       	rcall	.+1254   	; 0xe7c <strnlen>
     996:	8c 01       	movw	r16, r24
     998:	f9 2d       	mov	r31, r9
     99a:	ff 77       	andi	r31, 0x7F	; 127
     99c:	13 c0       	rjmp	.+38     	; 0x9c4 <__stack+0xc5>
     99e:	56 01       	movw	r10, r12
     9a0:	22 e0       	ldi	r18, 0x02	; 2
     9a2:	a2 0e       	add	r10, r18
     9a4:	b1 1c       	adc	r11, r1
     9a6:	f6 01       	movw	r30, r12
     9a8:	c0 80       	ld	r12, Z
     9aa:	d1 80       	ldd	r13, Z+1	; 0x01
     9ac:	96 fe       	sbrs	r9, 6
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
     9b0:	61 2f       	mov	r22, r17
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
     9b6:	6f ef       	ldi	r22, 0xFF	; 255
     9b8:	7f ef       	ldi	r23, 0xFF	; 255
     9ba:	c6 01       	movw	r24, r12
     9bc:	54 d2       	rcall	.+1192   	; 0xe66 <strnlen_P>
     9be:	8c 01       	movw	r16, r24
     9c0:	f9 2d       	mov	r31, r9
     9c2:	f0 68       	ori	r31, 0x80	; 128
     9c4:	9f 2e       	mov	r9, r31
     9c6:	f3 fd       	sbrc	r31, 3
     9c8:	18 c0       	rjmp	.+48     	; 0x9fa <__stack+0xfb>
     9ca:	85 2d       	mov	r24, r5
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	08 17       	cp	r16, r24
     9d0:	19 07       	cpc	r17, r25
     9d2:	98 f4       	brcc	.+38     	; 0x9fa <__stack+0xfb>
     9d4:	b7 01       	movw	r22, r14
     9d6:	80 e2       	ldi	r24, 0x20	; 32
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	5b d2       	rcall	.+1206   	; 0xe92 <fputc>
     9dc:	5a 94       	dec	r5
     9de:	f5 cf       	rjmp	.-22     	; 0x9ca <__stack+0xcb>
     9e0:	f6 01       	movw	r30, r12
     9e2:	97 fc       	sbrc	r9, 7
     9e4:	85 91       	lpm	r24, Z+
     9e6:	97 fe       	sbrs	r9, 7
     9e8:	81 91       	ld	r24, Z+
     9ea:	6f 01       	movw	r12, r30
     9ec:	b7 01       	movw	r22, r14
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	50 d2       	rcall	.+1184   	; 0xe92 <fputc>
     9f2:	51 10       	cpse	r5, r1
     9f4:	5a 94       	dec	r5
     9f6:	01 50       	subi	r16, 0x01	; 1
     9f8:	11 09       	sbc	r17, r1
     9fa:	01 15       	cp	r16, r1
     9fc:	11 05       	cpc	r17, r1
     9fe:	81 f7       	brne	.-32     	; 0x9e0 <__stack+0xe1>
     a00:	f0 c0       	rjmp	.+480    	; 0xbe2 <__stack+0x2e3>
     a02:	84 36       	cpi	r24, 0x64	; 100
     a04:	11 f0       	breq	.+4      	; 0xa0a <__stack+0x10b>
     a06:	89 36       	cpi	r24, 0x69	; 105
     a08:	59 f5       	brne	.+86     	; 0xa60 <__stack+0x161>
     a0a:	56 01       	movw	r10, r12
     a0c:	97 fe       	sbrs	r9, 7
     a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__stack+0x123>
     a10:	24 e0       	ldi	r18, 0x04	; 4
     a12:	a2 0e       	add	r10, r18
     a14:	b1 1c       	adc	r11, r1
     a16:	f6 01       	movw	r30, r12
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <__stack+0x137>
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	af 0e       	add	r10, r31
     a26:	b1 1c       	adc	r11, r1
     a28:	f6 01       	movw	r30, r12
     a2a:	60 81       	ld	r22, Z
     a2c:	71 81       	ldd	r23, Z+1	; 0x01
     a2e:	07 2e       	mov	r0, r23
     a30:	00 0c       	add	r0, r0
     a32:	88 0b       	sbc	r24, r24
     a34:	99 0b       	sbc	r25, r25
     a36:	f9 2d       	mov	r31, r9
     a38:	ff 76       	andi	r31, 0x6F	; 111
     a3a:	9f 2e       	mov	r9, r31
     a3c:	97 ff       	sbrs	r25, 7
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__stack+0x153>
     a40:	90 95       	com	r25
     a42:	80 95       	com	r24
     a44:	70 95       	com	r23
     a46:	61 95       	neg	r22
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	8f 4f       	sbci	r24, 0xFF	; 255
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	f0 68       	ori	r31, 0x80	; 128
     a50:	9f 2e       	mov	r9, r31
     a52:	2a e0       	ldi	r18, 0x0A	; 10
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	a3 01       	movw	r20, r6
     a58:	77 d2       	rcall	.+1262   	; 0xf48 <__ultoa_invert>
     a5a:	c8 2e       	mov	r12, r24
     a5c:	c6 18       	sub	r12, r6
     a5e:	3e c0       	rjmp	.+124    	; 0xadc <__stack+0x1dd>
     a60:	09 2d       	mov	r16, r9
     a62:	85 37       	cpi	r24, 0x75	; 117
     a64:	21 f4       	brne	.+8      	; 0xa6e <__stack+0x16f>
     a66:	0f 7e       	andi	r16, 0xEF	; 239
     a68:	2a e0       	ldi	r18, 0x0A	; 10
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	1d c0       	rjmp	.+58     	; 0xaa8 <__stack+0x1a9>
     a6e:	09 7f       	andi	r16, 0xF9	; 249
     a70:	8f 36       	cpi	r24, 0x6F	; 111
     a72:	91 f0       	breq	.+36     	; 0xa98 <__stack+0x199>
     a74:	18 f4       	brcc	.+6      	; 0xa7c <__stack+0x17d>
     a76:	88 35       	cpi	r24, 0x58	; 88
     a78:	59 f0       	breq	.+22     	; 0xa90 <__stack+0x191>
     a7a:	bc c0       	rjmp	.+376    	; 0xbf4 <__stack+0x2f5>
     a7c:	80 37       	cpi	r24, 0x70	; 112
     a7e:	19 f0       	breq	.+6      	; 0xa86 <__stack+0x187>
     a80:	88 37       	cpi	r24, 0x78	; 120
     a82:	11 f0       	breq	.+4      	; 0xa88 <__stack+0x189>
     a84:	b7 c0       	rjmp	.+366    	; 0xbf4 <__stack+0x2f5>
     a86:	00 61       	ori	r16, 0x10	; 16
     a88:	04 ff       	sbrs	r16, 4
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__stack+0x19f>
     a8c:	04 60       	ori	r16, 0x04	; 4
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <__stack+0x19f>
     a90:	94 fe       	sbrs	r9, 4
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <__stack+0x1a5>
     a94:	06 60       	ori	r16, 0x06	; 6
     a96:	06 c0       	rjmp	.+12     	; 0xaa4 <__stack+0x1a5>
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__stack+0x1a9>
     a9e:	20 e1       	ldi	r18, 0x10	; 16
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <__stack+0x1a9>
     aa4:	20 e1       	ldi	r18, 0x10	; 16
     aa6:	32 e0       	ldi	r19, 0x02	; 2
     aa8:	56 01       	movw	r10, r12
     aaa:	07 ff       	sbrs	r16, 7
     aac:	09 c0       	rjmp	.+18     	; 0xac0 <__stack+0x1c1>
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	a8 0e       	add	r10, r24
     ab2:	b1 1c       	adc	r11, r1
     ab4:	f6 01       	movw	r30, r12
     ab6:	60 81       	ld	r22, Z
     ab8:	71 81       	ldd	r23, Z+1	; 0x01
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <__stack+0x1d1>
     ac0:	f2 e0       	ldi	r31, 0x02	; 2
     ac2:	af 0e       	add	r10, r31
     ac4:	b1 1c       	adc	r11, r1
     ac6:	f6 01       	movw	r30, r12
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a3 01       	movw	r20, r6
     ad2:	3a d2       	rcall	.+1140   	; 0xf48 <__ultoa_invert>
     ad4:	c8 2e       	mov	r12, r24
     ad6:	c6 18       	sub	r12, r6
     ad8:	0f 77       	andi	r16, 0x7F	; 127
     ada:	90 2e       	mov	r9, r16
     adc:	96 fe       	sbrs	r9, 6
     ade:	0b c0       	rjmp	.+22     	; 0xaf6 <__stack+0x1f7>
     ae0:	09 2d       	mov	r16, r9
     ae2:	0e 7f       	andi	r16, 0xFE	; 254
     ae4:	c1 16       	cp	r12, r17
     ae6:	50 f4       	brcc	.+20     	; 0xafc <__stack+0x1fd>
     ae8:	94 fe       	sbrs	r9, 4
     aea:	0a c0       	rjmp	.+20     	; 0xb00 <__stack+0x201>
     aec:	92 fc       	sbrc	r9, 2
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <__stack+0x201>
     af0:	09 2d       	mov	r16, r9
     af2:	0e 7e       	andi	r16, 0xEE	; 238
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <__stack+0x201>
     af6:	dc 2c       	mov	r13, r12
     af8:	09 2d       	mov	r16, r9
     afa:	03 c0       	rjmp	.+6      	; 0xb02 <__stack+0x203>
     afc:	dc 2c       	mov	r13, r12
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <__stack+0x203>
     b00:	d1 2e       	mov	r13, r17
     b02:	04 ff       	sbrs	r16, 4
     b04:	0d c0       	rjmp	.+26     	; 0xb20 <__stack+0x221>
     b06:	fe 01       	movw	r30, r28
     b08:	ec 0d       	add	r30, r12
     b0a:	f1 1d       	adc	r31, r1
     b0c:	80 81       	ld	r24, Z
     b0e:	80 33       	cpi	r24, 0x30	; 48
     b10:	11 f4       	brne	.+4      	; 0xb16 <__stack+0x217>
     b12:	09 7e       	andi	r16, 0xE9	; 233
     b14:	09 c0       	rjmp	.+18     	; 0xb28 <__stack+0x229>
     b16:	02 ff       	sbrs	r16, 2
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <__stack+0x227>
     b1a:	d3 94       	inc	r13
     b1c:	d3 94       	inc	r13
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__stack+0x229>
     b20:	80 2f       	mov	r24, r16
     b22:	86 78       	andi	r24, 0x86	; 134
     b24:	09 f0       	breq	.+2      	; 0xb28 <__stack+0x229>
     b26:	d3 94       	inc	r13
     b28:	03 fd       	sbrc	r16, 3
     b2a:	10 c0       	rjmp	.+32     	; 0xb4c <__stack+0x24d>
     b2c:	00 ff       	sbrs	r16, 0
     b2e:	06 c0       	rjmp	.+12     	; 0xb3c <__stack+0x23d>
     b30:	1c 2d       	mov	r17, r12
     b32:	d5 14       	cp	r13, r5
     b34:	78 f4       	brcc	.+30     	; 0xb54 <__stack+0x255>
     b36:	15 0d       	add	r17, r5
     b38:	1d 19       	sub	r17, r13
     b3a:	0c c0       	rjmp	.+24     	; 0xb54 <__stack+0x255>
     b3c:	d5 14       	cp	r13, r5
     b3e:	50 f4       	brcc	.+20     	; 0xb54 <__stack+0x255>
     b40:	b7 01       	movw	r22, r14
     b42:	80 e2       	ldi	r24, 0x20	; 32
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a5 d1       	rcall	.+842    	; 0xe92 <fputc>
     b48:	d3 94       	inc	r13
     b4a:	f8 cf       	rjmp	.-16     	; 0xb3c <__stack+0x23d>
     b4c:	d5 14       	cp	r13, r5
     b4e:	10 f4       	brcc	.+4      	; 0xb54 <__stack+0x255>
     b50:	5d 18       	sub	r5, r13
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <__stack+0x257>
     b54:	51 2c       	mov	r5, r1
     b56:	04 ff       	sbrs	r16, 4
     b58:	0f c0       	rjmp	.+30     	; 0xb78 <__stack+0x279>
     b5a:	b7 01       	movw	r22, r14
     b5c:	80 e3       	ldi	r24, 0x30	; 48
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	98 d1       	rcall	.+816    	; 0xe92 <fputc>
     b62:	02 ff       	sbrs	r16, 2
     b64:	16 c0       	rjmp	.+44     	; 0xb92 <__stack+0x293>
     b66:	01 fd       	sbrc	r16, 1
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <__stack+0x271>
     b6a:	88 e7       	ldi	r24, 0x78	; 120
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__stack+0x275>
     b70:	88 e5       	ldi	r24, 0x58	; 88
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	b7 01       	movw	r22, r14
     b76:	0c c0       	rjmp	.+24     	; 0xb90 <__stack+0x291>
     b78:	80 2f       	mov	r24, r16
     b7a:	86 78       	andi	r24, 0x86	; 134
     b7c:	51 f0       	breq	.+20     	; 0xb92 <__stack+0x293>
     b7e:	01 ff       	sbrs	r16, 1
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <__stack+0x287>
     b82:	8b e2       	ldi	r24, 0x2B	; 43
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <__stack+0x289>
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	07 fd       	sbrc	r16, 7
     b8a:	8d e2       	ldi	r24, 0x2D	; 45
     b8c:	b7 01       	movw	r22, r14
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	80 d1       	rcall	.+768    	; 0xe92 <fputc>
     b92:	c1 16       	cp	r12, r17
     b94:	30 f4       	brcc	.+12     	; 0xba2 <__stack+0x2a3>
     b96:	b7 01       	movw	r22, r14
     b98:	80 e3       	ldi	r24, 0x30	; 48
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	7a d1       	rcall	.+756    	; 0xe92 <fputc>
     b9e:	11 50       	subi	r17, 0x01	; 1
     ba0:	f8 cf       	rjmp	.-16     	; 0xb92 <__stack+0x293>
     ba2:	ca 94       	dec	r12
     ba4:	f3 01       	movw	r30, r6
     ba6:	ec 0d       	add	r30, r12
     ba8:	f1 1d       	adc	r31, r1
     baa:	80 81       	ld	r24, Z
     bac:	b7 01       	movw	r22, r14
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	70 d1       	rcall	.+736    	; 0xe92 <fputc>
     bb2:	c1 10       	cpse	r12, r1
     bb4:	f6 cf       	rjmp	.-20     	; 0xba2 <__stack+0x2a3>
     bb6:	15 c0       	rjmp	.+42     	; 0xbe2 <__stack+0x2e3>
     bb8:	f4 e0       	ldi	r31, 0x04	; 4
     bba:	f5 15       	cp	r31, r5
     bbc:	50 f5       	brcc	.+84     	; 0xc12 <__stack+0x313>
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	58 1a       	sub	r5, r24
     bc2:	93 fe       	sbrs	r9, 3
     bc4:	1e c0       	rjmp	.+60     	; 0xc02 <__stack+0x303>
     bc6:	01 11       	cpse	r16, r1
     bc8:	25 c0       	rjmp	.+74     	; 0xc14 <__stack+0x315>
     bca:	2c 85       	ldd	r18, Y+12	; 0x0c
     bcc:	23 ff       	sbrs	r18, 3
     bce:	27 c0       	rjmp	.+78     	; 0xc1e <__stack+0x31f>
     bd0:	08 e6       	ldi	r16, 0x68	; 104
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	39 2d       	mov	r19, r9
     bd6:	30 71       	andi	r19, 0x10	; 16
     bd8:	93 2e       	mov	r9, r19
     bda:	f8 01       	movw	r30, r16
     bdc:	84 91       	lpm	r24, Z
     bde:	81 11       	cpse	r24, r1
     be0:	21 c0       	rjmp	.+66     	; 0xc24 <__stack+0x325>
     be2:	55 20       	and	r5, r5
     be4:	09 f4       	brne	.+2      	; 0xbe8 <__stack+0x2e9>
     be6:	fc cc       	rjmp	.-1544   	; 0x5e0 <vfprintf+0x54>
     be8:	b7 01       	movw	r22, r14
     bea:	80 e2       	ldi	r24, 0x20	; 32
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	51 d1       	rcall	.+674    	; 0xe92 <fputc>
     bf0:	5a 94       	dec	r5
     bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <__stack+0x2e3>
     bf4:	f7 01       	movw	r30, r14
     bf6:	86 81       	ldd	r24, Z+6	; 0x06
     bf8:	97 81       	ldd	r25, Z+7	; 0x07
     bfa:	23 c0       	rjmp	.+70     	; 0xc42 <__stack+0x343>
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	9f ef       	ldi	r25, 0xFF	; 255
     c00:	20 c0       	rjmp	.+64     	; 0xc42 <__stack+0x343>
     c02:	b7 01       	movw	r22, r14
     c04:	80 e2       	ldi	r24, 0x20	; 32
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	44 d1       	rcall	.+648    	; 0xe92 <fputc>
     c0a:	5a 94       	dec	r5
     c0c:	51 10       	cpse	r5, r1
     c0e:	f9 cf       	rjmp	.-14     	; 0xc02 <__stack+0x303>
     c10:	da cf       	rjmp	.-76     	; 0xbc6 <__stack+0x2c7>
     c12:	51 2c       	mov	r5, r1
     c14:	b7 01       	movw	r22, r14
     c16:	80 2f       	mov	r24, r16
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	3b d1       	rcall	.+630    	; 0xe92 <fputc>
     c1c:	d6 cf       	rjmp	.-84     	; 0xbca <__stack+0x2cb>
     c1e:	0c e6       	ldi	r16, 0x6C	; 108
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	d8 cf       	rjmp	.-80     	; 0xbd4 <__stack+0x2d5>
     c24:	91 10       	cpse	r9, r1
     c26:	80 52       	subi	r24, 0x20	; 32
     c28:	b7 01       	movw	r22, r14
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	32 d1       	rcall	.+612    	; 0xe92 <fputc>
     c2e:	0f 5f       	subi	r16, 0xFF	; 255
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	d3 cf       	rjmp	.-90     	; 0xbda <__stack+0x2db>
     c34:	23 e0       	ldi	r18, 0x03	; 3
     c36:	25 15       	cp	r18, r5
     c38:	10 f4       	brcc	.+4      	; 0xc3e <__stack+0x33f>
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	c1 cf       	rjmp	.-126    	; 0xbc0 <__stack+0x2c1>
     c3e:	51 2c       	mov	r5, r1
     c40:	c4 cf       	rjmp	.-120    	; 0xbca <__stack+0x2cb>
     c42:	60 96       	adiw	r28, 0x10	; 16
     c44:	e2 e1       	ldi	r30, 0x12	; 18
     c46:	1c c0       	rjmp	.+56     	; 0xc80 <__epilogue_restores__>

00000c48 <__prologue_saves__>:
     c48:	2f 92       	push	r2
     c4a:	3f 92       	push	r3
     c4c:	4f 92       	push	r4
     c4e:	5f 92       	push	r5
     c50:	6f 92       	push	r6
     c52:	7f 92       	push	r7
     c54:	8f 92       	push	r8
     c56:	9f 92       	push	r9
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	ca 1b       	sub	r28, r26
     c72:	db 0b       	sbc	r29, r27
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	09 94       	ijmp

00000c80 <__epilogue_restores__>:
     c80:	2a 88       	ldd	r2, Y+18	; 0x12
     c82:	39 88       	ldd	r3, Y+17	; 0x11
     c84:	48 88       	ldd	r4, Y+16	; 0x10
     c86:	5f 84       	ldd	r5, Y+15	; 0x0f
     c88:	6e 84       	ldd	r6, Y+14	; 0x0e
     c8a:	7d 84       	ldd	r7, Y+13	; 0x0d
     c8c:	8c 84       	ldd	r8, Y+12	; 0x0c
     c8e:	9b 84       	ldd	r9, Y+11	; 0x0b
     c90:	aa 84       	ldd	r10, Y+10	; 0x0a
     c92:	b9 84       	ldd	r11, Y+9	; 0x09
     c94:	c8 84       	ldd	r12, Y+8	; 0x08
     c96:	df 80       	ldd	r13, Y+7	; 0x07
     c98:	ee 80       	ldd	r14, Y+6	; 0x06
     c9a:	fd 80       	ldd	r15, Y+5	; 0x05
     c9c:	0c 81       	ldd	r16, Y+4	; 0x04
     c9e:	1b 81       	ldd	r17, Y+3	; 0x03
     ca0:	aa 81       	ldd	r26, Y+2	; 0x02
     ca2:	b9 81       	ldd	r27, Y+1	; 0x01
     ca4:	ce 0f       	add	r28, r30
     ca6:	d1 1d       	adc	r29, r1
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	ed 01       	movw	r28, r26
     cb4:	08 95       	ret

00000cb6 <__ftoa_engine>:
     cb6:	28 30       	cpi	r18, 0x08	; 8
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <__ftoa_engine+0x6>
     cba:	27 e0       	ldi	r18, 0x07	; 7
     cbc:	33 27       	eor	r19, r19
     cbe:	da 01       	movw	r26, r20
     cc0:	99 0f       	add	r25, r25
     cc2:	31 1d       	adc	r19, r1
     cc4:	87 fd       	sbrc	r24, 7
     cc6:	91 60       	ori	r25, 0x01	; 1
     cc8:	00 96       	adiw	r24, 0x00	; 0
     cca:	61 05       	cpc	r22, r1
     ccc:	71 05       	cpc	r23, r1
     cce:	39 f4       	brne	.+14     	; 0xcde <__ftoa_engine+0x28>
     cd0:	32 60       	ori	r19, 0x02	; 2
     cd2:	2e 5f       	subi	r18, 0xFE	; 254
     cd4:	3d 93       	st	X+, r19
     cd6:	30 e3       	ldi	r19, 0x30	; 48
     cd8:	2a 95       	dec	r18
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <__ftoa_engine+0x1e>
     cdc:	08 95       	ret
     cde:	9f 3f       	cpi	r25, 0xFF	; 255
     ce0:	30 f0       	brcs	.+12     	; 0xcee <__ftoa_engine+0x38>
     ce2:	80 38       	cpi	r24, 0x80	; 128
     ce4:	71 05       	cpc	r23, r1
     ce6:	61 05       	cpc	r22, r1
     ce8:	09 f0       	breq	.+2      	; 0xcec <__ftoa_engine+0x36>
     cea:	3c 5f       	subi	r19, 0xFC	; 252
     cec:	3c 5f       	subi	r19, 0xFC	; 252
     cee:	3d 93       	st	X+, r19
     cf0:	91 30       	cpi	r25, 0x01	; 1
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <__ftoa_engine+0x40>
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	91 1d       	adc	r25, r1
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	1f 93       	push	r17
     cfe:	0f 93       	push	r16
     d00:	ff 92       	push	r15
     d02:	ef 92       	push	r14
     d04:	19 2f       	mov	r17, r25
     d06:	98 7f       	andi	r25, 0xF8	; 248
     d08:	96 95       	lsr	r25
     d0a:	e9 2f       	mov	r30, r25
     d0c:	96 95       	lsr	r25
     d0e:	96 95       	lsr	r25
     d10:	e9 0f       	add	r30, r25
     d12:	ff 27       	eor	r31, r31
     d14:	e6 53       	subi	r30, 0x36	; 54
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	99 27       	eor	r25, r25
     d1a:	33 27       	eor	r19, r19
     d1c:	ee 24       	eor	r14, r14
     d1e:	ff 24       	eor	r15, r15
     d20:	a7 01       	movw	r20, r14
     d22:	e7 01       	movw	r28, r14
     d24:	05 90       	lpm	r0, Z+
     d26:	08 94       	sec
     d28:	07 94       	ror	r0
     d2a:	28 f4       	brcc	.+10     	; 0xd36 <__ftoa_engine+0x80>
     d2c:	36 0f       	add	r19, r22
     d2e:	e7 1e       	adc	r14, r23
     d30:	f8 1e       	adc	r15, r24
     d32:	49 1f       	adc	r20, r25
     d34:	51 1d       	adc	r21, r1
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	06 94       	lsr	r0
     d40:	a1 f7       	brne	.-24     	; 0xd2a <__ftoa_engine+0x74>
     d42:	05 90       	lpm	r0, Z+
     d44:	07 94       	ror	r0
     d46:	28 f4       	brcc	.+10     	; 0xd52 <__ftoa_engine+0x9c>
     d48:	e7 0e       	add	r14, r23
     d4a:	f8 1e       	adc	r15, r24
     d4c:	49 1f       	adc	r20, r25
     d4e:	56 1f       	adc	r21, r22
     d50:	c1 1d       	adc	r28, r1
     d52:	77 0f       	add	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	66 1f       	adc	r22, r22
     d5a:	06 94       	lsr	r0
     d5c:	a1 f7       	brne	.-24     	; 0xd46 <__ftoa_engine+0x90>
     d5e:	05 90       	lpm	r0, Z+
     d60:	07 94       	ror	r0
     d62:	28 f4       	brcc	.+10     	; 0xd6e <__ftoa_engine+0xb8>
     d64:	f8 0e       	add	r15, r24
     d66:	49 1f       	adc	r20, r25
     d68:	56 1f       	adc	r21, r22
     d6a:	c7 1f       	adc	r28, r23
     d6c:	d1 1d       	adc	r29, r1
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	66 1f       	adc	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	06 94       	lsr	r0
     d78:	a1 f7       	brne	.-24     	; 0xd62 <__ftoa_engine+0xac>
     d7a:	05 90       	lpm	r0, Z+
     d7c:	07 94       	ror	r0
     d7e:	20 f4       	brcc	.+8      	; 0xd88 <__ftoa_engine+0xd2>
     d80:	49 0f       	add	r20, r25
     d82:	56 1f       	adc	r21, r22
     d84:	c7 1f       	adc	r28, r23
     d86:	d8 1f       	adc	r29, r24
     d88:	99 0f       	add	r25, r25
     d8a:	66 1f       	adc	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	06 94       	lsr	r0
     d92:	a9 f7       	brne	.-22     	; 0xd7e <__ftoa_engine+0xc8>
     d94:	84 91       	lpm	r24, Z
     d96:	10 95       	com	r17
     d98:	17 70       	andi	r17, 0x07	; 7
     d9a:	41 f0       	breq	.+16     	; 0xdac <__ftoa_engine+0xf6>
     d9c:	d6 95       	lsr	r29
     d9e:	c7 95       	ror	r28
     da0:	57 95       	ror	r21
     da2:	47 95       	ror	r20
     da4:	f7 94       	ror	r15
     da6:	e7 94       	ror	r14
     da8:	1a 95       	dec	r17
     daa:	c1 f7       	brne	.-16     	; 0xd9c <__ftoa_engine+0xe6>
     dac:	e0 e7       	ldi	r30, 0x70	; 112
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	68 94       	set
     db2:	15 90       	lpm	r1, Z+
     db4:	15 91       	lpm	r17, Z+
     db6:	35 91       	lpm	r19, Z+
     db8:	65 91       	lpm	r22, Z+
     dba:	95 91       	lpm	r25, Z+
     dbc:	05 90       	lpm	r0, Z+
     dbe:	7f e2       	ldi	r23, 0x2F	; 47
     dc0:	73 95       	inc	r23
     dc2:	e1 18       	sub	r14, r1
     dc4:	f1 0a       	sbc	r15, r17
     dc6:	43 0b       	sbc	r20, r19
     dc8:	56 0b       	sbc	r21, r22
     dca:	c9 0b       	sbc	r28, r25
     dcc:	d0 09       	sbc	r29, r0
     dce:	c0 f7       	brcc	.-16     	; 0xdc0 <__ftoa_engine+0x10a>
     dd0:	e1 0c       	add	r14, r1
     dd2:	f1 1e       	adc	r15, r17
     dd4:	43 1f       	adc	r20, r19
     dd6:	56 1f       	adc	r21, r22
     dd8:	c9 1f       	adc	r28, r25
     dda:	d0 1d       	adc	r29, r0
     ddc:	7e f4       	brtc	.+30     	; 0xdfc <__ftoa_engine+0x146>
     dde:	70 33       	cpi	r23, 0x30	; 48
     de0:	11 f4       	brne	.+4      	; 0xde6 <__ftoa_engine+0x130>
     de2:	8a 95       	dec	r24
     de4:	e6 cf       	rjmp	.-52     	; 0xdb2 <__ftoa_engine+0xfc>
     de6:	e8 94       	clt
     de8:	01 50       	subi	r16, 0x01	; 1
     dea:	30 f0       	brcs	.+12     	; 0xdf8 <__ftoa_engine+0x142>
     dec:	08 0f       	add	r16, r24
     dee:	0a f4       	brpl	.+2      	; 0xdf2 <__ftoa_engine+0x13c>
     df0:	00 27       	eor	r16, r16
     df2:	02 17       	cp	r16, r18
     df4:	08 f4       	brcc	.+2      	; 0xdf8 <__ftoa_engine+0x142>
     df6:	20 2f       	mov	r18, r16
     df8:	23 95       	inc	r18
     dfa:	02 2f       	mov	r16, r18
     dfc:	7a 33       	cpi	r23, 0x3A	; 58
     dfe:	28 f0       	brcs	.+10     	; 0xe0a <__ftoa_engine+0x154>
     e00:	79 e3       	ldi	r23, 0x39	; 57
     e02:	7d 93       	st	X+, r23
     e04:	2a 95       	dec	r18
     e06:	e9 f7       	brne	.-6      	; 0xe02 <__ftoa_engine+0x14c>
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__ftoa_engine+0x174>
     e0a:	7d 93       	st	X+, r23
     e0c:	2a 95       	dec	r18
     e0e:	89 f6       	brne	.-94     	; 0xdb2 <__ftoa_engine+0xfc>
     e10:	06 94       	lsr	r0
     e12:	97 95       	ror	r25
     e14:	67 95       	ror	r22
     e16:	37 95       	ror	r19
     e18:	17 95       	ror	r17
     e1a:	17 94       	ror	r1
     e1c:	e1 18       	sub	r14, r1
     e1e:	f1 0a       	sbc	r15, r17
     e20:	43 0b       	sbc	r20, r19
     e22:	56 0b       	sbc	r21, r22
     e24:	c9 0b       	sbc	r28, r25
     e26:	d0 09       	sbc	r29, r0
     e28:	98 f0       	brcs	.+38     	; 0xe50 <__ftoa_engine+0x19a>
     e2a:	23 95       	inc	r18
     e2c:	7e 91       	ld	r23, -X
     e2e:	73 95       	inc	r23
     e30:	7a 33       	cpi	r23, 0x3A	; 58
     e32:	08 f0       	brcs	.+2      	; 0xe36 <__ftoa_engine+0x180>
     e34:	70 e3       	ldi	r23, 0x30	; 48
     e36:	7c 93       	st	X, r23
     e38:	20 13       	cpse	r18, r16
     e3a:	b8 f7       	brcc	.-18     	; 0xe2a <__ftoa_engine+0x174>
     e3c:	7e 91       	ld	r23, -X
     e3e:	70 61       	ori	r23, 0x10	; 16
     e40:	7d 93       	st	X+, r23
     e42:	30 f0       	brcs	.+12     	; 0xe50 <__ftoa_engine+0x19a>
     e44:	83 95       	inc	r24
     e46:	71 e3       	ldi	r23, 0x31	; 49
     e48:	7d 93       	st	X+, r23
     e4a:	70 e3       	ldi	r23, 0x30	; 48
     e4c:	2a 95       	dec	r18
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <__ftoa_engine+0x192>
     e50:	11 24       	eor	r1, r1
     e52:	ef 90       	pop	r14
     e54:	ff 90       	pop	r15
     e56:	0f 91       	pop	r16
     e58:	1f 91       	pop	r17
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	99 27       	eor	r25, r25
     e60:	87 fd       	sbrc	r24, 7
     e62:	90 95       	com	r25
     e64:	08 95       	ret

00000e66 <strnlen_P>:
     e66:	fc 01       	movw	r30, r24
     e68:	05 90       	lpm	r0, Z+
     e6a:	61 50       	subi	r22, 0x01	; 1
     e6c:	70 40       	sbci	r23, 0x00	; 0
     e6e:	01 10       	cpse	r0, r1
     e70:	d8 f7       	brcc	.-10     	; 0xe68 <strnlen_P+0x2>
     e72:	80 95       	com	r24
     e74:	90 95       	com	r25
     e76:	8e 0f       	add	r24, r30
     e78:	9f 1f       	adc	r25, r31
     e7a:	08 95       	ret

00000e7c <strnlen>:
     e7c:	fc 01       	movw	r30, r24
     e7e:	61 50       	subi	r22, 0x01	; 1
     e80:	70 40       	sbci	r23, 0x00	; 0
     e82:	01 90       	ld	r0, Z+
     e84:	01 10       	cpse	r0, r1
     e86:	d8 f7       	brcc	.-10     	; 0xe7e <strnlen+0x2>
     e88:	80 95       	com	r24
     e8a:	90 95       	com	r25
     e8c:	8e 0f       	add	r24, r30
     e8e:	9f 1f       	adc	r25, r31
     e90:	08 95       	ret

00000e92 <fputc>:
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	fb 01       	movw	r30, r22
     e9c:	23 81       	ldd	r18, Z+3	; 0x03
     e9e:	21 fd       	sbrc	r18, 1
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <fputc+0x16>
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	2c c0       	rjmp	.+88     	; 0xf00 <fputc+0x6e>
     ea8:	22 ff       	sbrs	r18, 2
     eaa:	16 c0       	rjmp	.+44     	; 0xed8 <fputc+0x46>
     eac:	46 81       	ldd	r20, Z+6	; 0x06
     eae:	57 81       	ldd	r21, Z+7	; 0x07
     eb0:	24 81       	ldd	r18, Z+4	; 0x04
     eb2:	35 81       	ldd	r19, Z+5	; 0x05
     eb4:	42 17       	cp	r20, r18
     eb6:	53 07       	cpc	r21, r19
     eb8:	44 f4       	brge	.+16     	; 0xeca <fputc+0x38>
     eba:	a0 81       	ld	r26, Z
     ebc:	b1 81       	ldd	r27, Z+1	; 0x01
     ebe:	9d 01       	movw	r18, r26
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	31 83       	std	Z+1, r19	; 0x01
     ec6:	20 83       	st	Z, r18
     ec8:	8c 93       	st	X, r24
     eca:	26 81       	ldd	r18, Z+6	; 0x06
     ecc:	37 81       	ldd	r19, Z+7	; 0x07
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	37 83       	std	Z+7, r19	; 0x07
     ed4:	26 83       	std	Z+6, r18	; 0x06
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <fputc+0x6e>
     ed8:	8b 01       	movw	r16, r22
     eda:	ec 01       	movw	r28, r24
     edc:	fb 01       	movw	r30, r22
     ede:	00 84       	ldd	r0, Z+8	; 0x08
     ee0:	f1 85       	ldd	r31, Z+9	; 0x09
     ee2:	e0 2d       	mov	r30, r0
     ee4:	09 95       	icall
     ee6:	89 2b       	or	r24, r25
     ee8:	e1 f6       	brne	.-72     	; 0xea2 <fputc+0x10>
     eea:	d8 01       	movw	r26, r16
     eec:	16 96       	adiw	r26, 0x06	; 6
     eee:	8d 91       	ld	r24, X+
     ef0:	9c 91       	ld	r25, X
     ef2:	17 97       	sbiw	r26, 0x07	; 7
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	17 96       	adiw	r26, 0x07	; 7
     ef8:	9c 93       	st	X, r25
     efa:	8e 93       	st	-X, r24
     efc:	16 97       	sbiw	r26, 0x06	; 6
     efe:	ce 01       	movw	r24, r28
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <sprintf>:
     f0a:	ae e0       	ldi	r26, 0x0E	; 14
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ea e8       	ldi	r30, 0x8A	; 138
     f10:	f7 e0       	ldi	r31, 0x07	; 7
     f12:	a8 ce       	rjmp	.-688    	; 0xc64 <__prologue_saves__+0x1c>
     f14:	0d 89       	ldd	r16, Y+21	; 0x15
     f16:	1e 89       	ldd	r17, Y+22	; 0x16
     f18:	86 e0       	ldi	r24, 0x06	; 6
     f1a:	8c 83       	std	Y+4, r24	; 0x04
     f1c:	1a 83       	std	Y+2, r17	; 0x02
     f1e:	09 83       	std	Y+1, r16	; 0x01
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f e7       	ldi	r25, 0x7F	; 127
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	ae 01       	movw	r20, r28
     f2a:	47 5e       	subi	r20, 0xE7	; 231
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	6f 89       	ldd	r22, Y+23	; 0x17
     f30:	78 8d       	ldd	r23, Y+24	; 0x18
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	2a db       	rcall	.-2476   	; 0x58c <vfprintf>
     f38:	ef 81       	ldd	r30, Y+7	; 0x07
     f3a:	f8 85       	ldd	r31, Y+8	; 0x08
     f3c:	e0 0f       	add	r30, r16
     f3e:	f1 1f       	adc	r31, r17
     f40:	10 82       	st	Z, r1
     f42:	2e 96       	adiw	r28, 0x0e	; 14
     f44:	e4 e0       	ldi	r30, 0x04	; 4
     f46:	aa ce       	rjmp	.-684    	; 0xc9c <__epilogue_restores__+0x1c>

00000f48 <__ultoa_invert>:
     f48:	fa 01       	movw	r30, r20
     f4a:	aa 27       	eor	r26, r26
     f4c:	28 30       	cpi	r18, 0x08	; 8
     f4e:	51 f1       	breq	.+84     	; 0xfa4 <__ultoa_invert+0x5c>
     f50:	20 31       	cpi	r18, 0x10	; 16
     f52:	81 f1       	breq	.+96     	; 0xfb4 <__ultoa_invert+0x6c>
     f54:	e8 94       	clt
     f56:	6f 93       	push	r22
     f58:	6e 7f       	andi	r22, 0xFE	; 254
     f5a:	6e 5f       	subi	r22, 0xFE	; 254
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	af 4f       	sbci	r26, 0xFF	; 255
     f64:	b1 e0       	ldi	r27, 0x01	; 1
     f66:	3e d0       	rcall	.+124    	; 0xfe4 <__ultoa_invert+0x9c>
     f68:	b4 e0       	ldi	r27, 0x04	; 4
     f6a:	3c d0       	rcall	.+120    	; 0xfe4 <__ultoa_invert+0x9c>
     f6c:	67 0f       	add	r22, r23
     f6e:	78 1f       	adc	r23, r24
     f70:	89 1f       	adc	r24, r25
     f72:	9a 1f       	adc	r25, r26
     f74:	a1 1d       	adc	r26, r1
     f76:	68 0f       	add	r22, r24
     f78:	79 1f       	adc	r23, r25
     f7a:	8a 1f       	adc	r24, r26
     f7c:	91 1d       	adc	r25, r1
     f7e:	a1 1d       	adc	r26, r1
     f80:	6a 0f       	add	r22, r26
     f82:	71 1d       	adc	r23, r1
     f84:	81 1d       	adc	r24, r1
     f86:	91 1d       	adc	r25, r1
     f88:	a1 1d       	adc	r26, r1
     f8a:	20 d0       	rcall	.+64     	; 0xfcc <__ultoa_invert+0x84>
     f8c:	09 f4       	brne	.+2      	; 0xf90 <__ultoa_invert+0x48>
     f8e:	68 94       	set
     f90:	3f 91       	pop	r19
     f92:	2a e0       	ldi	r18, 0x0A	; 10
     f94:	26 9f       	mul	r18, r22
     f96:	11 24       	eor	r1, r1
     f98:	30 19       	sub	r19, r0
     f9a:	30 5d       	subi	r19, 0xD0	; 208
     f9c:	31 93       	st	Z+, r19
     f9e:	de f6       	brtc	.-74     	; 0xf56 <__ultoa_invert+0xe>
     fa0:	cf 01       	movw	r24, r30
     fa2:	08 95       	ret
     fa4:	46 2f       	mov	r20, r22
     fa6:	47 70       	andi	r20, 0x07	; 7
     fa8:	40 5d       	subi	r20, 0xD0	; 208
     faa:	41 93       	st	Z+, r20
     fac:	b3 e0       	ldi	r27, 0x03	; 3
     fae:	0f d0       	rcall	.+30     	; 0xfce <__ultoa_invert+0x86>
     fb0:	c9 f7       	brne	.-14     	; 0xfa4 <__ultoa_invert+0x5c>
     fb2:	f6 cf       	rjmp	.-20     	; 0xfa0 <__ultoa_invert+0x58>
     fb4:	46 2f       	mov	r20, r22
     fb6:	4f 70       	andi	r20, 0x0F	; 15
     fb8:	40 5d       	subi	r20, 0xD0	; 208
     fba:	4a 33       	cpi	r20, 0x3A	; 58
     fbc:	18 f0       	brcs	.+6      	; 0xfc4 <__ultoa_invert+0x7c>
     fbe:	49 5d       	subi	r20, 0xD9	; 217
     fc0:	31 fd       	sbrc	r19, 1
     fc2:	40 52       	subi	r20, 0x20	; 32
     fc4:	41 93       	st	Z+, r20
     fc6:	02 d0       	rcall	.+4      	; 0xfcc <__ultoa_invert+0x84>
     fc8:	a9 f7       	brne	.-22     	; 0xfb4 <__ultoa_invert+0x6c>
     fca:	ea cf       	rjmp	.-44     	; 0xfa0 <__ultoa_invert+0x58>
     fcc:	b4 e0       	ldi	r27, 0x04	; 4
     fce:	a6 95       	lsr	r26
     fd0:	97 95       	ror	r25
     fd2:	87 95       	ror	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	ba 95       	dec	r27
     fda:	c9 f7       	brne	.-14     	; 0xfce <__ultoa_invert+0x86>
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	61 05       	cpc	r22, r1
     fe0:	71 05       	cpc	r23, r1
     fe2:	08 95       	ret
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	0a 2e       	mov	r0, r26
     fea:	06 94       	lsr	r0
     fec:	57 95       	ror	r21
     fee:	47 95       	ror	r20
     ff0:	37 95       	ror	r19
     ff2:	27 95       	ror	r18
     ff4:	ba 95       	dec	r27
     ff6:	c9 f7       	brne	.-14     	; 0xfea <__ultoa_invert+0xa2>
     ff8:	62 0f       	add	r22, r18
     ffa:	73 1f       	adc	r23, r19
     ffc:	84 1f       	adc	r24, r20
     ffe:	95 1f       	adc	r25, r21
    1000:	a0 1d       	adc	r26, r0
    1002:	08 95       	ret

00001004 <_exit>:
    1004:	f8 94       	cli

00001006 <__stop_program>:
    1006:	ff cf       	rjmp	.-2      	; 0x1006 <__stop_program>
